
Code_with_Terminal_Automation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08003b60  08003b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c70  08003c70  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c70  08003c70  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c70  08003c70  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000005c  08003cd4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003cd4  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009949  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ae  00000000  00000000  00029a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000950  00000000  00000000  0002b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000726  00000000  00000000  0002bd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179a5  00000000  00000000  0002c436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b950  00000000  00000000  00043ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008899a  00000000  00000000  0004f72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a84  00000000  00000000  000d80c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000dab4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b48 	.word	0x08003b48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003b48 	.word	0x08003b48

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <UART_SendString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_SendString(const char *str) {
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000164:	e00c      	b.n	8000180 <UART_SendString+0x24>
        while (!(USART2->SR & USART_SR_TXE));
 8000166:	bf00      	nop
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <UART_SendString+0x38>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000170:	2b00      	cmp	r3, #0
 8000172:	d0f9      	beq.n	8000168 <UART_SendString+0xc>
        USART2->DR = *str++;
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	1c5a      	adds	r2, r3, #1
 8000178:	607a      	str	r2, [r7, #4]
 800017a:	781a      	ldrb	r2, [r3, #0]
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <UART_SendString+0x38>)
 800017e:	605a      	str	r2, [r3, #4]
    while (*str) {
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1ee      	bne.n	8000166 <UART_SendString+0xa>
    }
}
 8000188:	bf00      	nop
 800018a:	bf00      	nop
 800018c:	370c      	adds	r7, #12
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40004400 	.word	0x40004400

08000198 <generate_wave_case1>:

void generate_wave_case1(void) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b0b0      	sub	sp, #192	; 0xc0
 800019c:	af00      	add	r7, sp, #0
	uint8_t myData[2];
	uint16_t adc_Value = 0;
 800019e:	2300      	movs	r3, #0
 80001a0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	uint16_t adc_array[80];
	char msg[16];

	// Define a global index variable to keep track of the position in the array
	uint8_t adc_index = 0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    // Code for generating wave for case 1
	  for (uint16_t voltage = 500; voltage <= 4000; voltage +=100) // Decrement voltage in steps
 80001aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001ae:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80001b2:	e04b      	b.n	800024c <generate_wave_case1+0xb4>
		 {
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 80001b4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80001b8:	0a1b      	lsrs	r3, r3, #8
 80001ba:	b29b      	uxth	r3, r3
 80001bc:	b2db      	uxtb	r3, r3
 80001be:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 80001c8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	2110      	movs	r1, #16
 80001d6:	4860      	ldr	r0, [pc, #384]	; (8000358 <generate_wave_case1+0x1c0>)
 80001d8:	f001 fe32 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001e2:	485d      	ldr	r0, [pc, #372]	; (8000358 <generate_wave_case1+0x1c0>)
 80001e4:	f001 fe2c 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 80001e8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80001ec:	f04f 33ff 	mov.w	r3, #4294967295
 80001f0:	2202      	movs	r2, #2
 80001f2:	485a      	ldr	r0, [pc, #360]	; (800035c <generate_wave_case1+0x1c4>)
 80001f4:	f002 fc3c 	bl	8002a70 <HAL_SPI_Transmit>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fe:	4856      	ldr	r0, [pc, #344]	; (8000358 <generate_wave_case1+0x1c0>)
 8000200:	f001 fe1e 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2110      	movs	r1, #16
 8000208:	4853      	ldr	r0, [pc, #332]	; (8000358 <generate_wave_case1+0x1c0>)
 800020a:	f001 fe19 	bl	8001e40 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 800020e:	4854      	ldr	r0, [pc, #336]	; (8000360 <generate_wave_case1+0x1c8>)
 8000210:	f001 f85a 	bl	80012c8 <HAL_ADC_Start>

	 // Wait for ADC conversion to complete
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000214:	f04f 31ff 	mov.w	r1, #4294967295
 8000218:	4851      	ldr	r0, [pc, #324]	; (8000360 <generate_wave_case1+0x1c8>)
 800021a:	f001 f903 	bl	8001424 <HAL_ADC_PollForConversion>

	 // Read ADC value
	 adc_Value = HAL_ADC_GetValue(&hadc1);
 800021e:	4850      	ldr	r0, [pc, #320]	; (8000360 <generate_wave_case1+0x1c8>)
 8000220:	f001 fa06 	bl	8001630 <HAL_ADC_GetValue>
 8000224:	4603      	mov	r3, r0
 8000226:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	 adc_array[adc_index++] = adc_Value;
 800022a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800022e:	1c5a      	adds	r2, r3, #1
 8000230:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	33c0      	adds	r3, #192	; 0xc0
 8000238:	443b      	add	r3, r7
 800023a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800023e:	f823 2cb0 	strh.w	r2, [r3, #-176]
	  for (uint16_t voltage = 500; voltage <= 4000; voltage +=100) // Decrement voltage in steps
 8000242:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000246:	3364      	adds	r3, #100	; 0x64
 8000248:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800024c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8000250:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000254:	d9ae      	bls.n	80001b4 <generate_wave_case1+0x1c>
		 }
	  for (uint16_t voltage = 4000; voltage > 0; voltage -=100) // Decrement voltage in steps
 8000256:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800025a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800025e:	e04b      	b.n	80002f8 <generate_wave_case1+0x160>
		 {
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 8000260:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b29b      	uxth	r3, r3
 8000268:	b2db      	uxtb	r3, r3
 800026a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800026e:	b2db      	uxtb	r3, r3
 8000270:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 8000274:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8000278:	b2db      	uxtb	r3, r3
 800027a:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	2110      	movs	r1, #16
 8000282:	4835      	ldr	r0, [pc, #212]	; (8000358 <generate_wave_case1+0x1c0>)
 8000284:	f001 fddc 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028e:	4832      	ldr	r0, [pc, #200]	; (8000358 <generate_wave_case1+0x1c0>)
 8000290:	f001 fdd6 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 8000294:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8000298:	f04f 33ff 	mov.w	r3, #4294967295
 800029c:	2202      	movs	r2, #2
 800029e:	482f      	ldr	r0, [pc, #188]	; (800035c <generate_wave_case1+0x1c4>)
 80002a0:	f002 fbe6 	bl	8002a70 <HAL_SPI_Transmit>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002aa:	482b      	ldr	r0, [pc, #172]	; (8000358 <generate_wave_case1+0x1c0>)
 80002ac:	f001 fdc8 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2110      	movs	r1, #16
 80002b4:	4828      	ldr	r0, [pc, #160]	; (8000358 <generate_wave_case1+0x1c0>)
 80002b6:	f001 fdc3 	bl	8001e40 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 80002ba:	4829      	ldr	r0, [pc, #164]	; (8000360 <generate_wave_case1+0x1c8>)
 80002bc:	f001 f804 	bl	80012c8 <HAL_ADC_Start>

	 // Wait for ADC conversion to complete
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002c0:	f04f 31ff 	mov.w	r1, #4294967295
 80002c4:	4826      	ldr	r0, [pc, #152]	; (8000360 <generate_wave_case1+0x1c8>)
 80002c6:	f001 f8ad 	bl	8001424 <HAL_ADC_PollForConversion>

	 // Read ADC value
	 adc_Value = HAL_ADC_GetValue(&hadc1);
 80002ca:	4825      	ldr	r0, [pc, #148]	; (8000360 <generate_wave_case1+0x1c8>)
 80002cc:	f001 f9b0 	bl	8001630 <HAL_ADC_GetValue>
 80002d0:	4603      	mov	r3, r0
 80002d2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	 adc_array[adc_index++] = adc_Value;
 80002d6:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80002da:	1c5a      	adds	r2, r3, #1
 80002dc:	f887 20bf 	strb.w	r2, [r7, #191]	; 0xbf
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	33c0      	adds	r3, #192	; 0xc0
 80002e4:	443b      	add	r3, r7
 80002e6:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80002ea:	f823 2cb0 	strh.w	r2, [r3, #-176]
	  for (uint16_t voltage = 4000; voltage > 0; voltage -=100) // Decrement voltage in steps
 80002ee:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80002f2:	3b64      	subs	r3, #100	; 0x64
 80002f4:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80002f8:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d1af      	bne.n	8000260 <generate_wave_case1+0xc8>
		 }
		for (int i = 0; i < sizeof(adc_array) / sizeof(adc_array[0]); i++) {
 8000300:	2300      	movs	r3, #0
 8000302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000306:	e01d      	b.n	8000344 <generate_wave_case1+0x1ac>
		    sprintf(msg, "%hu\r\n", adc_array[i]); // Format current ADC value
 8000308:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800030c:	005b      	lsls	r3, r3, #1
 800030e:	33c0      	adds	r3, #192	; 0xc0
 8000310:	443b      	add	r3, r7
 8000312:	f833 3cb0 	ldrh.w	r3, [r3, #-176]
 8000316:	461a      	mov	r2, r3
 8000318:	463b      	mov	r3, r7
 800031a:	4912      	ldr	r1, [pc, #72]	; (8000364 <generate_wave_case1+0x1cc>)
 800031c:	4618      	mov	r0, r3
 800031e:	f002 ff61 	bl	80031e4 <siprintf>
		    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY); // Transmit formatted value via UART
 8000322:	463b      	mov	r3, r7
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff11 	bl	800014c <strlen>
 800032a:	4603      	mov	r3, r0
 800032c:	b29a      	uxth	r2, r3
 800032e:	4639      	mov	r1, r7
 8000330:	f04f 33ff 	mov.w	r3, #4294967295
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <generate_wave_case1+0x1d0>)
 8000336:	f002 fdd5 	bl	8002ee4 <HAL_UART_Transmit>
		for (int i = 0; i < sizeof(adc_array) / sizeof(adc_array[0]); i++) {
 800033a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800033e:	3301      	adds	r3, #1
 8000340:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000344:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000348:	2b4f      	cmp	r3, #79	; 0x4f
 800034a:	d9dd      	bls.n	8000308 <generate_wave_case1+0x170>
		}
}
 800034c:	bf00      	nop
 800034e:	bf00      	nop
 8000350:	37c0      	adds	r7, #192	; 0xc0
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010c00 	.word	0x40010c00
 800035c:	200000a8 	.word	0x200000a8
 8000360:	20000078 	.word	0x20000078
 8000364:	08003b60 	.word	0x08003b60
 8000368:	20000100 	.word	0x20000100

0800036c <generate_wave_case2>:

void generate_wave_case2(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b0dc      	sub	sp, #368	; 0x170
 8000370:	af00      	add	r7, sp, #0
	uint8_t myData[2];
	uint16_t adc_Value = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
	uint16_t adc_array[160];
	char msg[16];
	uint8_t adc_index = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
    // Code for generating wave for case 2
	for (uint16_t voltage = 2100; voltage <= 4000; voltage +=100) // Increment voltage in steps
 800037e:	f640 0334 	movw	r3, #2100	; 0x834
 8000382:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c
 8000386:	e04d      	b.n	8000424 <generate_wave_case2+0xb8>
	 {
	   // Construct SPI data
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 8000388:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	b29b      	uxth	r3, r3
 8000390:	b2db      	uxtb	r3, r3
 8000392:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 800039c:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155

	   // Set CS pin low to select MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2110      	movs	r1, #16
 80003aa:	48d2      	ldr	r0, [pc, #840]	; (80006f4 <generate_wave_case2+0x388>)
 80003ac:	f001 fd48 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b6:	48cf      	ldr	r0, [pc, #828]	; (80006f4 <generate_wave_case2+0x388>)
 80003b8:	f001 fd42 	bl	8001e40 <HAL_GPIO_WritePin>

	   // Transmit SPI data
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 80003bc:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80003c0:	f04f 33ff 	mov.w	r3, #4294967295
 80003c4:	2202      	movs	r2, #2
 80003c6:	48cc      	ldr	r0, [pc, #816]	; (80006f8 <generate_wave_case2+0x38c>)
 80003c8:	f002 fb52 	bl	8002a70 <HAL_SPI_Transmit>

	   // Set CS pin high to deselect MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d2:	48c8      	ldr	r0, [pc, #800]	; (80006f4 <generate_wave_case2+0x388>)
 80003d4:	f001 fd34 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2110      	movs	r1, #16
 80003dc:	48c5      	ldr	r0, [pc, #788]	; (80006f4 <generate_wave_case2+0x388>)
 80003de:	f001 fd2f 	bl	8001e40 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 80003e2:	48c6      	ldr	r0, [pc, #792]	; (80006fc <generate_wave_case2+0x390>)
 80003e4:	f000 ff70 	bl	80012c8 <HAL_ADC_Start>

	 // Wait for ADC conversion to complete
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80003e8:	f04f 31ff 	mov.w	r1, #4294967295
 80003ec:	48c3      	ldr	r0, [pc, #780]	; (80006fc <generate_wave_case2+0x390>)
 80003ee:	f001 f819 	bl	8001424 <HAL_ADC_PollForConversion>

	 // Read ADC value
	 adc_Value = HAL_ADC_GetValue(&hadc1);
 80003f2:	48c2      	ldr	r0, [pc, #776]	; (80006fc <generate_wave_case2+0x390>)
 80003f4:	f001 f91c 	bl	8001630 <HAL_ADC_GetValue>
 80003f8:	4603      	mov	r3, r0
 80003fa:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
	 adc_array[adc_index++] = adc_Value;
 80003fe:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000402:	1c5a      	adds	r2, r3, #1
 8000404:	f887 216f 	strb.w	r2, [r7, #367]	; 0x16f
 8000408:	4619      	mov	r1, r3
 800040a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800040e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000412:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8000416:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for (uint16_t voltage = 2100; voltage <= 4000; voltage +=100) // Increment voltage in steps
 800041a:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 800041e:	3364      	adds	r3, #100	; 0x64
 8000420:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c
 8000424:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8000428:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800042c:	d9ac      	bls.n	8000388 <generate_wave_case2+0x1c>
	 }
	for (uint16_t voltage = 4000; voltage > 2000; voltage -=100) // Increment voltage in steps
 800042e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000432:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
 8000436:	e04d      	b.n	80004d4 <generate_wave_case2+0x168>
	 {
	   // Construct SPI data
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 8000438:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 800043c:	0a1b      	lsrs	r3, r3, #8
 800043e:	b29b      	uxth	r3, r3
 8000440:	b2db      	uxtb	r3, r3
 8000442:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000446:	b2db      	uxtb	r3, r3
 8000448:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 800044c:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8000450:	b2db      	uxtb	r3, r3
 8000452:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155

	   // Set CS pin low to select MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2110      	movs	r1, #16
 800045a:	48a6      	ldr	r0, [pc, #664]	; (80006f4 <generate_wave_case2+0x388>)
 800045c:	f001 fcf0 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000466:	48a3      	ldr	r0, [pc, #652]	; (80006f4 <generate_wave_case2+0x388>)
 8000468:	f001 fcea 	bl	8001e40 <HAL_GPIO_WritePin>

	   // Transmit SPI data
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 800046c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000470:	f04f 33ff 	mov.w	r3, #4294967295
 8000474:	2202      	movs	r2, #2
 8000476:	48a0      	ldr	r0, [pc, #640]	; (80006f8 <generate_wave_case2+0x38c>)
 8000478:	f002 fafa 	bl	8002a70 <HAL_SPI_Transmit>

	   // Set CS pin high to deselect MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000482:	489c      	ldr	r0, [pc, #624]	; (80006f4 <generate_wave_case2+0x388>)
 8000484:	f001 fcdc 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2110      	movs	r1, #16
 800048c:	4899      	ldr	r0, [pc, #612]	; (80006f4 <generate_wave_case2+0x388>)
 800048e:	f001 fcd7 	bl	8001e40 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc1);
 8000492:	489a      	ldr	r0, [pc, #616]	; (80006fc <generate_wave_case2+0x390>)
 8000494:	f000 ff18 	bl	80012c8 <HAL_ADC_Start>

		 // Wait for ADC conversion to complete
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000498:	f04f 31ff 	mov.w	r1, #4294967295
 800049c:	4897      	ldr	r0, [pc, #604]	; (80006fc <generate_wave_case2+0x390>)
 800049e:	f000 ffc1 	bl	8001424 <HAL_ADC_PollForConversion>

		 // Read ADC value
		 adc_Value = HAL_ADC_GetValue(&hadc1);
 80004a2:	4896      	ldr	r0, [pc, #600]	; (80006fc <generate_wave_case2+0x390>)
 80004a4:	f001 f8c4 	bl	8001630 <HAL_ADC_GetValue>
 80004a8:	4603      	mov	r3, r0
 80004aa:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		 adc_array[adc_index++] = adc_Value;
 80004ae:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80004b2:	1c5a      	adds	r2, r3, #1
 80004b4:	f887 216f 	strb.w	r2, [r7, #367]	; 0x16f
 80004b8:	4619      	mov	r1, r3
 80004ba:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80004be:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80004c2:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 80004c6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for (uint16_t voltage = 4000; voltage > 2000; voltage -=100) // Increment voltage in steps
 80004ca:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 80004ce:	3b64      	subs	r3, #100	; 0x64
 80004d0:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a
 80004d4:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 80004d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80004dc:	d8ac      	bhi.n	8000438 <generate_wave_case2+0xcc>
	 }
	for (uint16_t voltage = 2100; voltage <= 4000; voltage +=100) // Increment voltage in steps
 80004de:	f640 0334 	movw	r3, #2100	; 0x834
 80004e2:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
 80004e6:	e04d      	b.n	8000584 <generate_wave_case2+0x218>
	 {
	   // Construct SPI data
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 80004e8:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80004ec:	0a1b      	lsrs	r3, r3, #8
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 80004fc:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155

	   // Set CS pin low to select MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2110      	movs	r1, #16
 800050a:	487a      	ldr	r0, [pc, #488]	; (80006f4 <generate_wave_case2+0x388>)
 800050c:	f001 fc98 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000516:	4877      	ldr	r0, [pc, #476]	; (80006f4 <generate_wave_case2+0x388>)
 8000518:	f001 fc92 	bl	8001e40 <HAL_GPIO_WritePin>

	   // Transmit SPI data
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 800051c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000520:	f04f 33ff 	mov.w	r3, #4294967295
 8000524:	2202      	movs	r2, #2
 8000526:	4874      	ldr	r0, [pc, #464]	; (80006f8 <generate_wave_case2+0x38c>)
 8000528:	f002 faa2 	bl	8002a70 <HAL_SPI_Transmit>

	   // Set CS pin high to deselect MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	4870      	ldr	r0, [pc, #448]	; (80006f4 <generate_wave_case2+0x388>)
 8000534:	f001 fc84 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2110      	movs	r1, #16
 800053c:	486d      	ldr	r0, [pc, #436]	; (80006f4 <generate_wave_case2+0x388>)
 800053e:	f001 fc7f 	bl	8001e40 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc1);
 8000542:	486e      	ldr	r0, [pc, #440]	; (80006fc <generate_wave_case2+0x390>)
 8000544:	f000 fec0 	bl	80012c8 <HAL_ADC_Start>

		 // Wait for ADC conversion to complete
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000548:	f04f 31ff 	mov.w	r1, #4294967295
 800054c:	486b      	ldr	r0, [pc, #428]	; (80006fc <generate_wave_case2+0x390>)
 800054e:	f000 ff69 	bl	8001424 <HAL_ADC_PollForConversion>

		 // Read ADC value
		 adc_Value = HAL_ADC_GetValue(&hadc1);
 8000552:	486a      	ldr	r0, [pc, #424]	; (80006fc <generate_wave_case2+0x390>)
 8000554:	f001 f86c 	bl	8001630 <HAL_ADC_GetValue>
 8000558:	4603      	mov	r3, r0
 800055a:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		 adc_array[adc_index++] = adc_Value;
 800055e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	f887 216f 	strb.w	r2, [r7, #367]	; 0x16f
 8000568:	4619      	mov	r1, r3
 800056a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800056e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000572:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8000576:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for (uint16_t voltage = 2100; voltage <= 4000; voltage +=100) // Increment voltage in steps
 800057a:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 800057e:	3364      	adds	r3, #100	; 0x64
 8000580:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
 8000584:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8000588:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800058c:	d9ac      	bls.n	80004e8 <generate_wave_case2+0x17c>
	 }
	for (uint16_t voltage = 4000; voltage > 2000; voltage -=100) // Increment voltage in steps
 800058e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000592:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
 8000596:	e04d      	b.n	8000634 <generate_wave_case2+0x2c8>
	 {
	   // Construct SPI data
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 8000598:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	b29b      	uxth	r3, r3
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 80005ac:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155

	   // Set CS pin low to select MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2110      	movs	r1, #16
 80005ba:	484e      	ldr	r0, [pc, #312]	; (80006f4 <generate_wave_case2+0x388>)
 80005bc:	f001 fc40 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	484b      	ldr	r0, [pc, #300]	; (80006f4 <generate_wave_case2+0x388>)
 80005c8:	f001 fc3a 	bl	8001e40 <HAL_GPIO_WritePin>

	   // Transmit SPI data
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 80005cc:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2202      	movs	r2, #2
 80005d6:	4848      	ldr	r0, [pc, #288]	; (80006f8 <generate_wave_case2+0x38c>)
 80005d8:	f002 fa4a 	bl	8002a70 <HAL_SPI_Transmit>

	   // Set CS pin high to deselect MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e2:	4844      	ldr	r0, [pc, #272]	; (80006f4 <generate_wave_case2+0x388>)
 80005e4:	f001 fc2c 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	4841      	ldr	r0, [pc, #260]	; (80006f4 <generate_wave_case2+0x388>)
 80005ee:	f001 fc27 	bl	8001e40 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc1);
 80005f2:	4842      	ldr	r0, [pc, #264]	; (80006fc <generate_wave_case2+0x390>)
 80005f4:	f000 fe68 	bl	80012c8 <HAL_ADC_Start>

		 // Wait for ADC conversion to complete
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005f8:	f04f 31ff 	mov.w	r1, #4294967295
 80005fc:	483f      	ldr	r0, [pc, #252]	; (80006fc <generate_wave_case2+0x390>)
 80005fe:	f000 ff11 	bl	8001424 <HAL_ADC_PollForConversion>

		 // Read ADC value
		 adc_Value = HAL_ADC_GetValue(&hadc1);
 8000602:	483e      	ldr	r0, [pc, #248]	; (80006fc <generate_wave_case2+0x390>)
 8000604:	f001 f814 	bl	8001630 <HAL_ADC_GetValue>
 8000608:	4603      	mov	r3, r0
 800060a:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		 adc_array[adc_index++] = adc_Value;
 800060e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8000612:	1c5a      	adds	r2, r3, #1
 8000614:	f887 216f 	strb.w	r2, [r7, #367]	; 0x16f
 8000618:	4619      	mov	r1, r3
 800061a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800061e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000622:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 8000626:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for (uint16_t voltage = 4000; voltage > 2000; voltage -=100) // Increment voltage in steps
 800062a:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 800062e:	3b64      	subs	r3, #100	; 0x64
 8000630:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
 8000634:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8000638:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800063c:	d8ac      	bhi.n	8000598 <generate_wave_case2+0x22c>
	 }
	for (uint16_t voltage = 2000; voltage > 0; voltage -=100) // Increment voltage in steps
 800063e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000642:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8000646:	e04d      	b.n	80006e4 <generate_wave_case2+0x378>
	 {
	   // Construct SPI data
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 8000648:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29b      	uxth	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 800065c:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155

	   // Set CS pin low to select MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000666:	2201      	movs	r2, #1
 8000668:	2110      	movs	r1, #16
 800066a:	4822      	ldr	r0, [pc, #136]	; (80006f4 <generate_wave_case2+0x388>)
 800066c:	f001 fbe8 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000676:	481f      	ldr	r0, [pc, #124]	; (80006f4 <generate_wave_case2+0x388>)
 8000678:	f001 fbe2 	bl	8001e40 <HAL_GPIO_WritePin>

	   // Transmit SPI data
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 800067c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	2202      	movs	r2, #2
 8000686:	481c      	ldr	r0, [pc, #112]	; (80006f8 <generate_wave_case2+0x38c>)
 8000688:	f002 f9f2 	bl	8002a70 <HAL_SPI_Transmit>

	   // Set CS pin high to deselect MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000692:	4818      	ldr	r0, [pc, #96]	; (80006f4 <generate_wave_case2+0x388>)
 8000694:	f001 fbd4 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4815      	ldr	r0, [pc, #84]	; (80006f4 <generate_wave_case2+0x388>)
 800069e:	f001 fbcf 	bl	8001e40 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc1);
 80006a2:	4816      	ldr	r0, [pc, #88]	; (80006fc <generate_wave_case2+0x390>)
 80006a4:	f000 fe10 	bl	80012c8 <HAL_ADC_Start>

		 // Wait for ADC conversion to complete
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006a8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <generate_wave_case2+0x390>)
 80006ae:	f000 feb9 	bl	8001424 <HAL_ADC_PollForConversion>

		 // Read ADC value
		 adc_Value = HAL_ADC_GetValue(&hadc1);
 80006b2:	4812      	ldr	r0, [pc, #72]	; (80006fc <generate_wave_case2+0x390>)
 80006b4:	f000 ffbc 	bl	8001630 <HAL_ADC_GetValue>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		 adc_array[adc_index++] = adc_Value;
 80006be:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	f887 216f 	strb.w	r2, [r7, #367]	; 0x16f
 80006c8:	4619      	mov	r1, r3
 80006ca:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80006ce:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80006d2:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 80006d6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for (uint16_t voltage = 2000; voltage > 0; voltage -=100) // Increment voltage in steps
 80006da:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 80006de:	3b64      	subs	r3, #100	; 0x64
 80006e0:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 80006e4:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1ad      	bne.n	8000648 <generate_wave_case2+0x2dc>
	 }
	for (uint16_t voltage = 100; voltage <= 2000; voltage +=100) // Increment voltage in steps
 80006ec:	2364      	movs	r3, #100	; 0x64
 80006ee:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
 80006f2:	e053      	b.n	800079c <generate_wave_case2+0x430>
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	200000a8 	.word	0x200000a8
 80006fc:	20000078 	.word	0x20000078
	 {
	   // Construct SPI data
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 8000700:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 8000704:	0a1b      	lsrs	r3, r3, #8
 8000706:	b29b      	uxth	r3, r3
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800070e:	b2db      	uxtb	r3, r3
 8000710:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 8000714:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155

	   // Set CS pin low to select MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2110      	movs	r1, #16
 8000722:	488e      	ldr	r0, [pc, #568]	; (800095c <generate_wave_case2+0x5f0>)
 8000724:	f001 fb8c 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072e:	488b      	ldr	r0, [pc, #556]	; (800095c <generate_wave_case2+0x5f0>)
 8000730:	f001 fb86 	bl	8001e40 <HAL_GPIO_WritePin>

	   // Transmit SPI data
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 8000734:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	2202      	movs	r2, #2
 800073e:	4888      	ldr	r0, [pc, #544]	; (8000960 <generate_wave_case2+0x5f4>)
 8000740:	f002 f996 	bl	8002a70 <HAL_SPI_Transmit>

	   // Set CS pin high to deselect MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074a:	4884      	ldr	r0, [pc, #528]	; (800095c <generate_wave_case2+0x5f0>)
 800074c:	f001 fb78 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2110      	movs	r1, #16
 8000754:	4881      	ldr	r0, [pc, #516]	; (800095c <generate_wave_case2+0x5f0>)
 8000756:	f001 fb73 	bl	8001e40 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc1);
 800075a:	4882      	ldr	r0, [pc, #520]	; (8000964 <generate_wave_case2+0x5f8>)
 800075c:	f000 fdb4 	bl	80012c8 <HAL_ADC_Start>

		 // Wait for ADC conversion to complete
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	487f      	ldr	r0, [pc, #508]	; (8000964 <generate_wave_case2+0x5f8>)
 8000766:	f000 fe5d 	bl	8001424 <HAL_ADC_PollForConversion>

		 // Read ADC value
		 adc_Value = HAL_ADC_GetValue(&hadc1);
 800076a:	487e      	ldr	r0, [pc, #504]	; (8000964 <generate_wave_case2+0x5f8>)
 800076c:	f000 ff60 	bl	8001630 <HAL_ADC_GetValue>
 8000770:	4603      	mov	r3, r0
 8000772:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		 adc_array[adc_index++] = adc_Value;
 8000776:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	f887 216f 	strb.w	r2, [r7, #367]	; 0x16f
 8000780:	4619      	mov	r1, r3
 8000782:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000786:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800078a:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 800078e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for (uint16_t voltage = 100; voltage <= 2000; voltage +=100) // Increment voltage in steps
 8000792:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 8000796:	3364      	adds	r3, #100	; 0x64
 8000798:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
 800079c:	f8b7 3162 	ldrh.w	r3, [r7, #354]	; 0x162
 80007a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007a4:	d9ac      	bls.n	8000700 <generate_wave_case2+0x394>
	 }
	for (uint16_t voltage = 2000; voltage > 0; voltage -=100) // Increment voltage in steps
 80007a6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007aa:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
 80007ae:	e04d      	b.n	800084c <generate_wave_case2+0x4e0>
	 {
	   // Construct SPI data
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 80007b0:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 80007c4:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155

	   // Set CS pin low to select MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2110      	movs	r1, #16
 80007d2:	4862      	ldr	r0, [pc, #392]	; (800095c <generate_wave_case2+0x5f0>)
 80007d4:	f001 fb34 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	485f      	ldr	r0, [pc, #380]	; (800095c <generate_wave_case2+0x5f0>)
 80007e0:	f001 fb2e 	bl	8001e40 <HAL_GPIO_WritePin>

	   // Transmit SPI data
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 80007e4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	2202      	movs	r2, #2
 80007ee:	485c      	ldr	r0, [pc, #368]	; (8000960 <generate_wave_case2+0x5f4>)
 80007f0:	f002 f93e 	bl	8002a70 <HAL_SPI_Transmit>

	   // Set CS pin high to deselect MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fa:	4858      	ldr	r0, [pc, #352]	; (800095c <generate_wave_case2+0x5f0>)
 80007fc:	f001 fb20 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2110      	movs	r1, #16
 8000804:	4855      	ldr	r0, [pc, #340]	; (800095c <generate_wave_case2+0x5f0>)
 8000806:	f001 fb1b 	bl	8001e40 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc1);
 800080a:	4856      	ldr	r0, [pc, #344]	; (8000964 <generate_wave_case2+0x5f8>)
 800080c:	f000 fd5c 	bl	80012c8 <HAL_ADC_Start>

		 // Wait for ADC conversion to complete
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000810:	f04f 31ff 	mov.w	r1, #4294967295
 8000814:	4853      	ldr	r0, [pc, #332]	; (8000964 <generate_wave_case2+0x5f8>)
 8000816:	f000 fe05 	bl	8001424 <HAL_ADC_PollForConversion>

		 // Read ADC value
		 adc_Value = HAL_ADC_GetValue(&hadc1);
 800081a:	4852      	ldr	r0, [pc, #328]	; (8000964 <generate_wave_case2+0x5f8>)
 800081c:	f000 ff08 	bl	8001630 <HAL_ADC_GetValue>
 8000820:	4603      	mov	r3, r0
 8000822:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		 adc_array[adc_index++] = adc_Value;
 8000826:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	f887 216f 	strb.w	r2, [r7, #367]	; 0x16f
 8000830:	4619      	mov	r1, r3
 8000832:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000836:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800083a:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 800083e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for (uint16_t voltage = 2000; voltage > 0; voltage -=100) // Increment voltage in steps
 8000842:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8000846:	3b64      	subs	r3, #100	; 0x64
 8000848:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
 800084c:	f8b7 3160 	ldrh.w	r3, [r7, #352]	; 0x160
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1ad      	bne.n	80007b0 <generate_wave_case2+0x444>
	 }
	for (uint16_t voltage = 100; voltage <= 2000; voltage +=100) // Increment voltage in steps
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 800085a:	e04d      	b.n	80008f8 <generate_wave_case2+0x58c>
	 {
	   // Construct SPI data
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 800085c:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	b29b      	uxth	r3, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800086a:	b2db      	uxtb	r3, r3
 800086c:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 8000870:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8000874:	b2db      	uxtb	r3, r3
 8000876:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155

	   // Set CS pin low to select MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	4837      	ldr	r0, [pc, #220]	; (800095c <generate_wave_case2+0x5f0>)
 8000880:	f001 fade 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088a:	4834      	ldr	r0, [pc, #208]	; (800095c <generate_wave_case2+0x5f0>)
 800088c:	f001 fad8 	bl	8001e40 <HAL_GPIO_WritePin>

	   // Transmit SPI data
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 8000890:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	2202      	movs	r2, #2
 800089a:	4831      	ldr	r0, [pc, #196]	; (8000960 <generate_wave_case2+0x5f4>)
 800089c:	f002 f8e8 	bl	8002a70 <HAL_SPI_Transmit>

	   // Set CS pin high to deselect MCP4921
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	482d      	ldr	r0, [pc, #180]	; (800095c <generate_wave_case2+0x5f0>)
 80008a8:	f001 faca 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2110      	movs	r1, #16
 80008b0:	482a      	ldr	r0, [pc, #168]	; (800095c <generate_wave_case2+0x5f0>)
 80008b2:	f001 fac5 	bl	8001e40 <HAL_GPIO_WritePin>
		  HAL_ADC_Start(&hadc1);
 80008b6:	482b      	ldr	r0, [pc, #172]	; (8000964 <generate_wave_case2+0x5f8>)
 80008b8:	f000 fd06 	bl	80012c8 <HAL_ADC_Start>

		 // Wait for ADC conversion to complete
		 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80008bc:	f04f 31ff 	mov.w	r1, #4294967295
 80008c0:	4828      	ldr	r0, [pc, #160]	; (8000964 <generate_wave_case2+0x5f8>)
 80008c2:	f000 fdaf 	bl	8001424 <HAL_ADC_PollForConversion>

		 // Read ADC value
		 adc_Value = HAL_ADC_GetValue(&hadc1);
 80008c6:	4827      	ldr	r0, [pc, #156]	; (8000964 <generate_wave_case2+0x5f8>)
 80008c8:	f000 feb2 	bl	8001630 <HAL_ADC_GetValue>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
		 adc_array[adc_index++] = adc_Value;
 80008d2:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	f887 216f 	strb.w	r2, [r7, #367]	; 0x16f
 80008dc:	4619      	mov	r1, r3
 80008de:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80008e2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80008e6:	f8b7 2156 	ldrh.w	r2, [r7, #342]	; 0x156
 80008ea:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	for (uint16_t voltage = 100; voltage <= 2000; voltage +=100) // Increment voltage in steps
 80008ee:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 80008f2:	3364      	adds	r3, #100	; 0x64
 80008f4:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 80008f8:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 80008fc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000900:	d9ac      	bls.n	800085c <generate_wave_case2+0x4f0>
	 }
	for (int i = 0; i < sizeof(adc_array) / sizeof(adc_array[0]); i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000908:	e01e      	b.n	8000948 <generate_wave_case2+0x5dc>
	    sprintf(msg, "%hu\r\n", adc_array[i]); // Format current ADC value
 800090a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800090e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000912:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8000916:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800091a:	461a      	mov	r2, r3
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4912      	ldr	r1, [pc, #72]	; (8000968 <generate_wave_case2+0x5fc>)
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fc5f 	bl	80031e4 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY); // Transmit formatted value via UART
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fc0f 	bl	800014c <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	b29a      	uxth	r2, r3
 8000932:	1d39      	adds	r1, r7, #4
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <generate_wave_case2+0x600>)
 800093a:	f002 fad3 	bl	8002ee4 <HAL_UART_Transmit>
	for (int i = 0; i < sizeof(adc_array) / sizeof(adc_array[0]); i++) {
 800093e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000942:	3301      	adds	r3, #1
 8000944:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000948:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800094c:	2b9f      	cmp	r3, #159	; 0x9f
 800094e:	d9dc      	bls.n	800090a <generate_wave_case2+0x59e>
	}
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40010c00 	.word	0x40010c00
 8000960:	200000a8 	.word	0x200000a8
 8000964:	20000078 	.word	0x20000078
 8000968:	08003b60 	.word	0x08003b60
 800096c:	20000100 	.word	0x20000100

08000970 <generate_wave_case3>:

void generate_wave_case3(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	uint8_t myData[2];
	uint16_t adc_Value = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	807b      	strh	r3, [r7, #2]
//	uint8_t loopCount = 0;
//	char msg[16];
//	uint8_t adc_index = 0;
	while(1)
	{
	  for (uint16_t voltage = 500; voltage <= 4000; voltage +=500) // Decrement voltage in steps
 800097a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	e02b      	b.n	80009da <generate_wave_case3+0x6a>
		 {
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800098e:	b2db      	uxtb	r3, r3
 8000990:	703b      	strb	r3, [r7, #0]
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	707b      	strb	r3, [r7, #1]
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2110      	movs	r1, #16
 800099c:	482b      	ldr	r0, [pc, #172]	; (8000a4c <generate_wave_case3+0xdc>)
 800099e:	f001 fa4f 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a8:	4828      	ldr	r0, [pc, #160]	; (8000a4c <generate_wave_case3+0xdc>)
 80009aa:	f001 fa49 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 80009ae:	4639      	mov	r1, r7
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	2202      	movs	r2, #2
 80009b6:	4826      	ldr	r0, [pc, #152]	; (8000a50 <generate_wave_case3+0xe0>)
 80009b8:	f002 f85a 	bl	8002a70 <HAL_SPI_Transmit>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c2:	4822      	ldr	r0, [pc, #136]	; (8000a4c <generate_wave_case3+0xdc>)
 80009c4:	f001 fa3c 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2110      	movs	r1, #16
 80009cc:	481f      	ldr	r0, [pc, #124]	; (8000a4c <generate_wave_case3+0xdc>)
 80009ce:	f001 fa37 	bl	8001e40 <HAL_GPIO_WritePin>
	  for (uint16_t voltage = 500; voltage <= 4000; voltage +=500) // Decrement voltage in steps
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80009d8:	80fb      	strh	r3, [r7, #6]
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80009e0:	d9cf      	bls.n	8000982 <generate_wave_case3+0x12>
//
//		 // Read ADC value
//		 adc_Value = HAL_ADC_GetValue(&hadc1);
//		 adc_array[adc_index++] = adc_Value;
		 }
	  for (uint16_t voltage = 4000; voltage > 0; voltage -=500) // Decrement voltage in steps
 80009e2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80009e6:	80bb      	strh	r3, [r7, #4]
 80009e8:	e02b      	b.n	8000a42 <generate_wave_case3+0xd2>
		 {
	   myData[0] = (voltage >> 8) | 0x30; // First byte (configuration bits + MSB)
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	703b      	strb	r3, [r7, #0]
	   myData[1] = voltage & 0xFF;        // Second byte (LSB)
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	707b      	strb	r3, [r7, #1]
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2110      	movs	r1, #16
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <generate_wave_case3+0xdc>)
 8000a06:	f001 fa1b 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a10:	480e      	ldr	r0, [pc, #56]	; (8000a4c <generate_wave_case3+0xdc>)
 8000a12:	f001 fa15 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_SPI_Transmit(&hspi1, myData, sizeof(myData), HAL_MAX_DELAY);
 8000a16:	4639      	mov	r1, r7
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <generate_wave_case3+0xe0>)
 8000a20:	f002 f826 	bl	8002a70 <HAL_SPI_Transmit>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <generate_wave_case3+0xdc>)
 8000a2c:	f001 fa08 	bl	8001e40 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <generate_wave_case3+0xdc>)
 8000a36:	f001 fa03 	bl	8001e40 <HAL_GPIO_WritePin>
	  for (uint16_t voltage = 4000; voltage > 0; voltage -=500) // Decrement voltage in steps
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000a40:	80bb      	strh	r3, [r7, #4]
 8000a42:	88bb      	ldrh	r3, [r7, #4]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1d0      	bne.n	80009ea <generate_wave_case3+0x7a>
	  for (uint16_t voltage = 500; voltage <= 4000; voltage +=500) // Decrement voltage in steps
 8000a48:	e797      	b.n	800097a <generate_wave_case3+0xa>
 8000a4a:	bf00      	nop
 8000a4c:	40010c00 	.word	0x40010c00
 8000a50:	200000a8 	.word	0x200000a8

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5a:	f000 fafb 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5e:	f000 f83d 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a62:	f000 f931 	bl	8000cc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a66:	f000 f891 	bl	8000b8c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000a6a:	f000 f8cd 	bl	8000c08 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a6e:	f000 f901 	bl	8000c74 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (USART2->SR & USART_SR_RXNE) {
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <main+0x74>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0320 	and.w	r3, r3, #32
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0f9      	beq.n	8000a72 <main+0x1e>
	              // Read the received character
			  char received_char = USART2->DR;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <main+0x74>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	71fb      	strb	r3, [r7, #7]

			  // Process the received character
			  switch (received_char) {
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b43      	cmp	r3, #67	; 0x43
 8000a88:	d012      	beq.n	8000ab0 <main+0x5c>
 8000a8a:	2b43      	cmp	r3, #67	; 0x43
 8000a8c:	dc16      	bgt.n	8000abc <main+0x68>
 8000a8e:	2b41      	cmp	r3, #65	; 0x41
 8000a90:	d002      	beq.n	8000a98 <main+0x44>
 8000a92:	2b42      	cmp	r3, #66	; 0x42
 8000a94:	d006      	beq.n	8000aa4 <main+0x50>
 8000a96:	e011      	b.n	8000abc <main+0x68>
				  case 'A':
					  UART_SendString("Generating wave for case 1\r\n");
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <main+0x78>)
 8000a9a:	f7ff fb5f 	bl	800015c <UART_SendString>
					  generate_wave_case1();
 8000a9e:	f7ff fb7b 	bl	8000198 <generate_wave_case1>
					  break;
 8000aa2:	e00f      	b.n	8000ac4 <main+0x70>
				  case 'B':
					  UART_SendString("Generating wave for case 2\r\n");
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <main+0x7c>)
 8000aa6:	f7ff fb59 	bl	800015c <UART_SendString>
					  generate_wave_case2();
 8000aaa:	f7ff fc5f 	bl	800036c <generate_wave_case2>
					  break;
 8000aae:	e009      	b.n	8000ac4 <main+0x70>
				  case 'C':
					  UART_SendString("Generating wave for case 3\r\n");
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <main+0x80>)
 8000ab2:	f7ff fb53 	bl	800015c <UART_SendString>
					  generate_wave_case3();
 8000ab6:	f7ff ff5b 	bl	8000970 <generate_wave_case3>
					  break;
 8000aba:	e003      	b.n	8000ac4 <main+0x70>
				  default:
					  UART_SendString("Invalid command. Please enter 'A' or 'B' or 'C'\r\n");
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <main+0x84>)
 8000abe:	f7ff fb4d 	bl	800015c <UART_SendString>
					  break;
 8000ac2:	bf00      	nop
	  if (USART2->SR & USART_SR_RXNE) {
 8000ac4:	e7d5      	b.n	8000a72 <main+0x1e>
 8000ac6:	bf00      	nop
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	08003b68 	.word	0x08003b68
 8000ad0:	08003b88 	.word	0x08003b88
 8000ad4:	08003ba8 	.word	0x08003ba8
 8000ad8:	08003bc8 	.word	0x08003bc8

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	; 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae6:	2228      	movs	r2, #40	; 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fb9a 	bl	8003224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL14;
 8000b20:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 f9a0 	bl	8001e70 <HAL_RCC_OscConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b36:	f000 f907 	bl	8000d48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2102      	movs	r1, #2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fc0c 	bl	8002374 <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b62:	f000 f8f1 	bl	8000d48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b66:	2302      	movs	r3, #2
 8000b68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000b6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fd8c 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b7e:	f000 f8e3 	bl	8000d48 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	; 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000b9e:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <MX_ADC1_Init+0x78>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bb6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bca:	f000 faa5 	bl	8001118 <HAL_ADC_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bd4:	f000 f8b8 	bl	8000d48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_ADC1_Init+0x74>)
 8000bea:	f000 fd2d 	bl	8001648 <HAL_ADC_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bf4:	f000 f8a8 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000078 	.word	0x20000078
 8000c04:	40012400 	.word	0x40012400

08000c08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MX_SPI1_Init+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c54:	220a      	movs	r2, #10
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c5a:	f001 fe85 	bl	8002968 <HAL_SPI_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c64:	f000 f870 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000a8 	.word	0x200000a8
 8000c70:	40013000 	.word	0x40013000

08000c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_USART2_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000cac:	f002 f8ca 	bl	8002e44 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f847 	bl	8000d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000100 	.word	0x20000100
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_GPIO_Init+0x78>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_GPIO_Init+0x78>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_GPIO_Init+0x78>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_GPIO_Init+0x78>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <MX_GPIO_Init+0x78>)
 8000cfa:	f043 0308 	orr.w	r3, r3, #8
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_GPIO_Init+0x78>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0308 	and.w	r3, r3, #8
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_GPIO_Init+0x7c>)
 8000d14:	f001 f894 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8000d18:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2302      	movs	r3, #2
 8000d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_GPIO_Init+0x7c>)
 8000d32:	f000 ff01 	bl	8001b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d4c:	b672      	cpsid	i
}
 8000d4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <Error_Handler+0x8>
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6193      	str	r3, [r2, #24]
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x5c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_MspInit+0x60>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_MspInit+0x60>)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000

08000db8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b088      	sub	sp, #32
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_ADC_MspInit+0x6c>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d121      	bne.n	8000e1c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_ADC_MspInit+0x70>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_ADC_MspInit+0x70>)
 8000dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_ADC_MspInit+0x70>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_ADC_MspInit+0x70>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a0c      	ldr	r2, [pc, #48]	; (8000e28 <HAL_ADC_MspInit+0x70>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_ADC_MspInit+0x70>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	4619      	mov	r1, r3
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <HAL_ADC_MspInit+0x74>)
 8000e18:	f000 fe8e 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40012400 	.word	0x40012400
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010800 	.word	0x40010800

08000e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <HAL_SPI_MspInit+0x70>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d123      	bne.n	8000e98 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_SPI_MspInit+0x74>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_SPI_MspInit+0x74>)
 8000e56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <HAL_SPI_MspInit+0x74>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_SPI_MspInit+0x74>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_SPI_MspInit+0x74>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6193      	str	r3, [r2, #24]
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_SPI_MspInit+0x74>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	f003 0304 	and.w	r3, r3, #4
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e80:	23a0      	movs	r3, #160	; 0xa0
 8000e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_SPI_MspInit+0x78>)
 8000e94:	f000 fe50 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40013000 	.word	0x40013000
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <HAL_UART_MspInit+0x88>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d12f      	bne.n	8000f2c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_UART_MspInit+0x8c>)
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	4a19      	ldr	r2, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0x8c>)
 8000ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed6:	61d3      	str	r3, [r2, #28]
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_UART_MspInit+0x8c>)
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0x8c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_UART_MspInit+0x8c>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0x8c>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efc:	2304      	movs	r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000f10:	f000 fe12 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f14:	2308      	movs	r3, #8
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0x90>)
 8000f28:	f000 fe06 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40004400 	.word	0x40004400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f000 f8ab 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f002 f938 	bl	8003234 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20005000 	.word	0x20005000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	20000148 	.word	0x20000148
 8000ff8:	20000298 	.word	0x20000298

08000ffc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001008:	f7ff fff8 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800100e:	490c      	ldr	r1, [pc, #48]	; (8001040 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001010:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001024:	4c09      	ldr	r4, [pc, #36]	; (800104c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f002 f905 	bl	8003240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001036:	f7ff fd0d 	bl	8000a54 <main>
  bx lr
 800103a:	4770      	bx	lr
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001044:	08003c78 	.word	0x08003c78
  ldr r2, =_sbss
 8001048:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800104c:	20000298 	.word	0x20000298

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x28>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 fd33 	bl	8001ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fe70 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fd3d 	bl	8001b1e <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 fd13 	bl	8001ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_IncTick+0x20>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	20000008 	.word	0x20000008
 8001100:	2000014c 	.word	0x2000014c

08001104 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	2000014c 	.word	0x2000014c

08001118 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e0be      	b.n	80012b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	d109      	bne.n	800115c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fe2e 	bl	8000db8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 fbc5 	bl	80018ec <ADC_ConversionStop_Disable>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 8099 	bne.w	80012a6 <HAL_ADC_Init+0x18e>
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 8095 	bne.w	80012a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001184:	f023 0302 	bic.w	r3, r3, #2
 8001188:	f043 0202 	orr.w	r2, r3, #2
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001198:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7b1b      	ldrb	r3, [r3, #12]
 800119e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b0:	d003      	beq.n	80011ba <HAL_ADC_Init+0xa2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d102      	bne.n	80011c0 <HAL_ADC_Init+0xa8>
 80011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011be:	e000      	b.n	80011c2 <HAL_ADC_Init+0xaa>
 80011c0:	2300      	movs	r3, #0
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7d1b      	ldrb	r3, [r3, #20]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d119      	bne.n	8001204 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b1b      	ldrb	r3, [r3, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d109      	bne.n	80011ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	3b01      	subs	r3, #1
 80011de:	035a      	lsls	r2, r3, #13
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	e00b      	b.n	8001204 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	f043 0220 	orr.w	r2, r3, #32
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	430a      	orrs	r2, r1
 8001216:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <HAL_ADC_Init+0x1a8>)
 8001220:	4013      	ands	r3, r2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	68b9      	ldr	r1, [r7, #8]
 8001228:	430b      	orrs	r3, r1
 800122a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001234:	d003      	beq.n	800123e <HAL_ADC_Init+0x126>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d104      	bne.n	8001248 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	3b01      	subs	r3, #1
 8001244:	051b      	lsls	r3, r3, #20
 8001246:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	430a      	orrs	r2, r1
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <HAL_ADC_Init+0x1ac>)
 8001264:	4013      	ands	r3, r2
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	429a      	cmp	r2, r3
 800126a:	d10b      	bne.n	8001284 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	f043 0201 	orr.w	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001282:	e018      	b.n	80012b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	f023 0312 	bic.w	r3, r3, #18
 800128c:	f043 0210 	orr.w	r2, r3, #16
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	f043 0201 	orr.w	r2, r3, #1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012a4:	e007      	b.n	80012b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	f043 0210 	orr.w	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	ffe1f7fd 	.word	0xffe1f7fd
 80012c4:	ff1f0efe 	.word	0xff1f0efe

080012c8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_Start+0x1a>
 80012de:	2302      	movs	r3, #2
 80012e0:	e098      	b.n	8001414 <HAL_ADC_Start+0x14c>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 faa4 	bl	8001838 <ADC_Enable>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 8087 	bne.w	800140a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a41      	ldr	r2, [pc, #260]	; (800141c <HAL_ADC_Start+0x154>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d105      	bne.n	8001326 <HAL_ADC_Start+0x5e>
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_ADC_Start+0x158>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d115      	bne.n	8001352 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	2b00      	cmp	r3, #0
 800133e:	d026      	beq.n	800138e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001344:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001348:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001350:	e01d      	b.n	800138e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a2f      	ldr	r2, [pc, #188]	; (8001420 <HAL_ADC_Start+0x158>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d004      	beq.n	8001372 <HAL_ADC_Start+0xaa>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_ADC_Start+0x154>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10d      	bne.n	800138e <HAL_ADC_Start+0xc6>
 8001372:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_ADC_Start+0x158>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001386:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	f023 0206 	bic.w	r2, r3, #6
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013a6:	e002      	b.n	80013ae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f06f 0202 	mvn.w	r2, #2
 80013be:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013ce:	d113      	bne.n	80013f8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_ADC_Start+0x154>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d105      	bne.n	80013e6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_ADC_Start+0x158>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d108      	bne.n	80013f8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	e00c      	b.n	8001412 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	e003      	b.n	8001412 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40012800 	.word	0x40012800
 8001420:	40012400 	.word	0x40012400

08001424 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800143a:	f7ff fe63 	bl	8001104 <HAL_GetTick>
 800143e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00b      	beq.n	8001466 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	f043 0220 	orr.w	r2, r3, #32
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0d3      	b.n	800160e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d131      	bne.n	80014d8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800147e:	2b00      	cmp	r3, #0
 8001480:	d12a      	bne.n	80014d8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001482:	e021      	b.n	80014c8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148a:	d01d      	beq.n	80014c8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <HAL_ADC_PollForConversion+0x7e>
 8001492:	f7ff fe37 	bl	8001104 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d212      	bcs.n	80014c8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10b      	bne.n	80014c8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	f043 0204 	orr.w	r2, r3, #4
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0a2      	b.n	800160e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0d6      	beq.n	8001484 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014d6:	e070      	b.n	80015ba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80014d8:	4b4f      	ldr	r3, [pc, #316]	; (8001618 <HAL_ADC_PollForConversion+0x1f4>)
 80014da:	681c      	ldr	r4, [r3, #0]
 80014dc:	2002      	movs	r0, #2
 80014de:	f001 f98d 	bl	80027fc <HAL_RCCEx_GetPeriphCLKFreq>
 80014e2:	4603      	mov	r3, r0
 80014e4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6919      	ldr	r1, [r3, #16]
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <HAL_ADC_PollForConversion+0x1f8>)
 80014f0:	400b      	ands	r3, r1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_ADC_PollForConversion+0x104>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68d9      	ldr	r1, [r3, #12]
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_ADC_PollForConversion+0x1fc>)
 80014fe:	400b      	ands	r3, r1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d111      	bne.n	8001528 <HAL_ADC_PollForConversion+0x104>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6919      	ldr	r1, [r3, #16]
 800150a:	4b46      	ldr	r3, [pc, #280]	; (8001624 <HAL_ADC_PollForConversion+0x200>)
 800150c:	400b      	ands	r3, r1
 800150e:	2b00      	cmp	r3, #0
 8001510:	d108      	bne.n	8001524 <HAL_ADC_PollForConversion+0x100>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	68d9      	ldr	r1, [r3, #12]
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_ADC_PollForConversion+0x204>)
 800151a:	400b      	ands	r3, r1
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_ADC_PollForConversion+0x100>
 8001520:	2314      	movs	r3, #20
 8001522:	e020      	b.n	8001566 <HAL_ADC_PollForConversion+0x142>
 8001524:	2329      	movs	r3, #41	; 0x29
 8001526:	e01e      	b.n	8001566 <HAL_ADC_PollForConversion+0x142>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6919      	ldr	r1, [r3, #16]
 800152e:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_ADC_PollForConversion+0x200>)
 8001530:	400b      	ands	r3, r1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_ADC_PollForConversion+0x120>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68d9      	ldr	r1, [r3, #12]
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_ADC_PollForConversion+0x204>)
 800153e:	400b      	ands	r3, r1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00d      	beq.n	8001560 <HAL_ADC_PollForConversion+0x13c>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6919      	ldr	r1, [r3, #16]
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <HAL_ADC_PollForConversion+0x208>)
 800154c:	400b      	ands	r3, r1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d108      	bne.n	8001564 <HAL_ADC_PollForConversion+0x140>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68d9      	ldr	r1, [r3, #12]
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <HAL_ADC_PollForConversion+0x208>)
 800155a:	400b      	ands	r3, r1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_ADC_PollForConversion+0x140>
 8001560:	2354      	movs	r3, #84	; 0x54
 8001562:	e000      	b.n	8001566 <HAL_ADC_PollForConversion+0x142>
 8001564:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800156c:	e021      	b.n	80015b2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d01a      	beq.n	80015ac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_ADC_PollForConversion+0x168>
 800157c:	f7ff fdc2 	bl	8001104 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d20f      	bcs.n	80015ac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d90b      	bls.n	80015ac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	f043 0204 	orr.w	r2, r3, #4
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e030      	b.n	800160e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d8d9      	bhi.n	800156e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f06f 0212 	mvn.w	r2, #18
 80015c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015de:	d115      	bne.n	800160c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	20000000 	.word	0x20000000
 800161c:	24924924 	.word	0x24924924
 8001620:	00924924 	.word	0x00924924
 8001624:	12492492 	.word	0x12492492
 8001628:	00492492 	.word	0x00492492
 800162c:	00249249 	.word	0x00249249

08001630 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x20>
 8001664:	2302      	movs	r3, #2
 8001666:	e0dc      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1da>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b06      	cmp	r3, #6
 8001676:	d81c      	bhi.n	80016b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b05      	subs	r3, #5
 800168a:	221f      	movs	r2, #31
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b05      	subs	r3, #5
 80016a4:	fa00 f203 	lsl.w	r2, r0, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
 80016b0:	e03c      	b.n	800172c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b0c      	cmp	r3, #12
 80016b8:	d81c      	bhi.n	80016f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b23      	subs	r3, #35	; 0x23
 80016cc:	221f      	movs	r2, #31
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	4019      	ands	r1, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	3b23      	subs	r3, #35	; 0x23
 80016e6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
 80016f2:	e01b      	b.n	800172c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	3b41      	subs	r3, #65	; 0x41
 8001706:	221f      	movs	r2, #31
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	4019      	ands	r1, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b41      	subs	r3, #65	; 0x41
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b09      	cmp	r3, #9
 8001732:	d91c      	bls.n	800176e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68d9      	ldr	r1, [r3, #12]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	3b1e      	subs	r3, #30
 8001746:	2207      	movs	r2, #7
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	4019      	ands	r1, r3
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6898      	ldr	r0, [r3, #8]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	3b1e      	subs	r3, #30
 8001760:	fa00 f203 	lsl.w	r2, r0, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	e019      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6919      	ldr	r1, [r3, #16]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	2207      	movs	r2, #7
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	4019      	ands	r1, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	6898      	ldr	r0, [r3, #8]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	fa00 f203 	lsl.w	r2, r0, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d003      	beq.n	80017b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d132      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a1d      	ldr	r2, [pc, #116]	; (800182c <HAL_ADC_ConfigChannel+0x1e4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d125      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d126      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b10      	cmp	r3, #16
 80017e0:	d11a      	bne.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_ADC_ConfigChannel+0x1e8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <HAL_ADC_ConfigChannel+0x1ec>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f8:	e002      	b.n	8001800 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f9      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x1b2>
 8001806:	e007      	b.n	8001818 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40012400 	.word	0x40012400
 8001830:	20000000 	.word	0x20000000
 8001834:	431bde83 	.word	0x431bde83

08001838 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d040      	beq.n	80018d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <ADC_Enable+0xac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <ADC_Enable+0xb0>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	0c9b      	lsrs	r3, r3, #18
 8001872:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001874:	e002      	b.n	800187c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001882:	f7ff fc3f 	bl	8001104 <HAL_GetTick>
 8001886:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001888:	e01f      	b.n	80018ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800188a:	f7ff fc3b 	bl	8001104 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d918      	bls.n	80018ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d011      	beq.n	80018ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	f043 0210 	orr.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e007      	b.n	80018da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d1d8      	bne.n	800188a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000000 	.word	0x20000000
 80018e8:	431bde83 	.word	0x431bde83

080018ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b01      	cmp	r3, #1
 8001904:	d12e      	bne.n	8001964 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001916:	f7ff fbf5 	bl	8001104 <HAL_GetTick>
 800191a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800191c:	e01b      	b.n	8001956 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800191e:	f7ff fbf1 	bl	8001104 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d914      	bls.n	8001956 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d10d      	bne.n	8001956 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f043 0210 	orr.w	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	f043 0201 	orr.w	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e007      	b.n	8001966 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d0dc      	beq.n	800191e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a9c:	d301      	bcc.n	8001aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00f      	b.n	8001ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <SysTick_Config+0x40>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aaa:	210f      	movs	r1, #15
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f7ff ff90 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <SysTick_Config+0x40>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SysTick_Config+0x40>)
 8001abc:	2207      	movs	r2, #7
 8001abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	e000e010 	.word	0xe000e010

08001ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff49 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b086      	sub	sp, #24
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af8:	f7ff ff5e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff ff90 	bl	8001a28 <NVIC_EncodePriority>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff5f 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffb0 	bl	8001a8c <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b08b      	sub	sp, #44	; 0x2c
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	e169      	b.n	8001e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f040 8158 	bne.w	8001e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a9a      	ldr	r2, [pc, #616]	; (8001dd8 <HAL_GPIO_Init+0x2a0>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d05e      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b74:	4a98      	ldr	r2, [pc, #608]	; (8001dd8 <HAL_GPIO_Init+0x2a0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d875      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b7a:	4a98      	ldr	r2, [pc, #608]	; (8001ddc <HAL_GPIO_Init+0x2a4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d058      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b80:	4a96      	ldr	r2, [pc, #600]	; (8001ddc <HAL_GPIO_Init+0x2a4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d86f      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b86:	4a96      	ldr	r2, [pc, #600]	; (8001de0 <HAL_GPIO_Init+0x2a8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d052      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b8c:	4a94      	ldr	r2, [pc, #592]	; (8001de0 <HAL_GPIO_Init+0x2a8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d869      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b92:	4a94      	ldr	r2, [pc, #592]	; (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04c      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b98:	4a92      	ldr	r2, [pc, #584]	; (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d863      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b9e:	4a92      	ldr	r2, [pc, #584]	; (8001de8 <HAL_GPIO_Init+0x2b0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d046      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001ba4:	4a90      	ldr	r2, [pc, #576]	; (8001de8 <HAL_GPIO_Init+0x2b0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d85d      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	d82a      	bhi.n	8001c04 <HAL_GPIO_Init+0xcc>
 8001bae:	2b12      	cmp	r3, #18
 8001bb0:	d859      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <HAL_GPIO_Init+0x80>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001c33 	.word	0x08001c33
 8001bbc:	08001c0d 	.word	0x08001c0d
 8001bc0:	08001c1f 	.word	0x08001c1f
 8001bc4:	08001c61 	.word	0x08001c61
 8001bc8:	08001c67 	.word	0x08001c67
 8001bcc:	08001c67 	.word	0x08001c67
 8001bd0:	08001c67 	.word	0x08001c67
 8001bd4:	08001c67 	.word	0x08001c67
 8001bd8:	08001c67 	.word	0x08001c67
 8001bdc:	08001c67 	.word	0x08001c67
 8001be0:	08001c67 	.word	0x08001c67
 8001be4:	08001c67 	.word	0x08001c67
 8001be8:	08001c67 	.word	0x08001c67
 8001bec:	08001c67 	.word	0x08001c67
 8001bf0:	08001c67 	.word	0x08001c67
 8001bf4:	08001c67 	.word	0x08001c67
 8001bf8:	08001c67 	.word	0x08001c67
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c29 	.word	0x08001c29
 8001c04:	4a79      	ldr	r2, [pc, #484]	; (8001dec <HAL_GPIO_Init+0x2b4>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c0a:	e02c      	b.n	8001c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e029      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e024      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	3308      	adds	r3, #8
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e01f      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	330c      	adds	r3, #12
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e01a      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e013      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	611a      	str	r2, [r3, #16]
          break;
 8001c52:	e009      	b.n	8001c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c54:	2308      	movs	r3, #8
 8001c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	615a      	str	r2, [r3, #20]
          break;
 8001c5e:	e003      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
          break;
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          break;
 8001c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2bff      	cmp	r3, #255	; 0xff
 8001c6c:	d801      	bhi.n	8001c72 <HAL_GPIO_Init+0x13a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	e001      	b.n	8001c76 <HAL_GPIO_Init+0x13e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2bff      	cmp	r3, #255	; 0xff
 8001c7c:	d802      	bhi.n	8001c84 <HAL_GPIO_Init+0x14c>
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x152>
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	3b08      	subs	r3, #8
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	210f      	movs	r1, #15
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	6a39      	ldr	r1, [r7, #32]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80b1 	beq.w	8001e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb8:	4b4d      	ldr	r3, [pc, #308]	; (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a4c      	ldr	r2, [pc, #304]	; (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd0:	4a48      	ldr	r2, [pc, #288]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a40      	ldr	r2, [pc, #256]	; (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_GPIO_Init+0x1ec>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <HAL_GPIO_Init+0x2c4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00d      	beq.n	8001d20 <HAL_GPIO_Init+0x1e8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3e      	ldr	r2, [pc, #248]	; (8001e00 <HAL_GPIO_Init+0x2c8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <HAL_GPIO_Init+0x1e4>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	; (8001e04 <HAL_GPIO_Init+0x2cc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_GPIO_Init+0x1e0>
 8001d14:	2303      	movs	r3, #3
 8001d16:	e006      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d18:	2304      	movs	r3, #4
 8001d1a:	e004      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_GPIO_Init+0x1ee>
 8001d24:	2300      	movs	r3, #0
 8001d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d36:	492f      	ldr	r1, [pc, #188]	; (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	492c      	ldr	r1, [pc, #176]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4928      	ldr	r1, [pc, #160]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d78:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60cb      	str	r3, [r1, #12]
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	491e      	ldr	r1, [pc, #120]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d006      	beq.n	8001dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001da0:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4918      	ldr	r1, [pc, #96]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
 8001dac:	e006      	b.n	8001dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4914      	ldr	r1, [pc, #80]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d021      	beq.n	8001e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	490e      	ldr	r1, [pc, #56]	; (8001e08 <HAL_GPIO_Init+0x2d0>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	e021      	b.n	8001e1a <HAL_GPIO_Init+0x2e2>
 8001dd6:	bf00      	nop
 8001dd8:	10320000 	.word	0x10320000
 8001ddc:	10310000 	.word	0x10310000
 8001de0:	10220000 	.word	0x10220000
 8001de4:	10210000 	.word	0x10210000
 8001de8:	10120000 	.word	0x10120000
 8001dec:	10110000 	.word	0x10110000
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010000 	.word	0x40010000
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	40011000 	.word	0x40011000
 8001e04:	40011400 	.word	0x40011400
 8001e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	4909      	ldr	r1, [pc, #36]	; (8001e3c <HAL_GPIO_Init+0x304>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f47f ae8e 	bne.w	8001b4c <HAL_GPIO_Init+0x14>
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	372c      	adds	r7, #44	; 0x2c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	40010400 	.word	0x40010400

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e5c:	e003      	b.n	8001e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	611a      	str	r2, [r3, #16]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e272      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8087 	beq.w	8001f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e90:	4b92      	ldr	r3, [pc, #584]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d00c      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e9c:	4b8f      	ldr	r3, [pc, #572]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d112      	bne.n	8001ece <HAL_RCC_OscConfig+0x5e>
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d10b      	bne.n	8001ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb6:	4b89      	ldr	r3, [pc, #548]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d06c      	beq.n	8001f9c <HAL_RCC_OscConfig+0x12c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d168      	bne.n	8001f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e24c      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x76>
 8001ed8:	4b80      	ldr	r3, [pc, #512]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a7f      	ldr	r2, [pc, #508]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	e02e      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x98>
 8001eee:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a7a      	ldr	r2, [pc, #488]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b78      	ldr	r3, [pc, #480]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a77      	ldr	r2, [pc, #476]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e01d      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0xbc>
 8001f12:	4b72      	ldr	r3, [pc, #456]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a71      	ldr	r2, [pc, #452]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b6f      	ldr	r3, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a6e      	ldr	r2, [pc, #440]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0xd4>
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a6a      	ldr	r2, [pc, #424]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	4b68      	ldr	r3, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a67      	ldr	r2, [pc, #412]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d013      	beq.n	8001f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f8da 	bl	8001104 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff f8d6 	bl	8001104 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b64      	cmp	r3, #100	; 0x64
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e200      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	4b5d      	ldr	r3, [pc, #372]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0xe4>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff f8c6 	bl	8001104 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f8c2 	bl	8001104 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e1ec      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x10c>
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d063      	beq.n	8002072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001faa:	4b4c      	ldr	r3, [pc, #304]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00b      	beq.n	8001fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fb6:	4b49      	ldr	r3, [pc, #292]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d11c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x18c>
 8001fc2:	4b46      	ldr	r3, [pc, #280]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d116      	bne.n	8001ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	4b43      	ldr	r3, [pc, #268]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d005      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x176>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e1c0      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4939      	ldr	r1, [pc, #228]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffa:	e03a      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b36      	ldr	r3, [pc, #216]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7ff f87b 	bl	8001104 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff f877 	bl	8001104 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1a1      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4927      	ldr	r1, [pc, #156]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002040:	4313      	orrs	r3, r2
 8002042:	600b      	str	r3, [r1, #0]
 8002044:	e015      	b.n	8002072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002046:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <HAL_RCC_OscConfig+0x270>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f85a 	bl	8001104 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002054:	f7ff f856 	bl	8001104 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e180      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	2b00      	cmp	r3, #0
 800207c:	d03a      	beq.n	80020f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d019      	beq.n	80020ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff f83a 	bl	8001104 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff f836 	bl	8001104 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e160      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <HAL_RCC_OscConfig+0x26c>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f000 face 	bl	8002654 <RCC_Delay>
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_RCC_OscConfig+0x274>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7ff f820 	bl	8001104 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c6:	e00f      	b.n	80020e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c8:	f7ff f81c 	bl	8001104 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d908      	bls.n	80020e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e146      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	42420000 	.word	0x42420000
 80020e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b92      	ldr	r3, [pc, #584]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1e9      	bne.n	80020c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a6 	beq.w	800224e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b8b      	ldr	r3, [pc, #556]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10d      	bne.n	800212e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	4b88      	ldr	r3, [pc, #544]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a87      	ldr	r2, [pc, #540]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b85      	ldr	r3, [pc, #532]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b82      	ldr	r3, [pc, #520]	; (8002338 <HAL_RCC_OscConfig+0x4c8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b7f      	ldr	r3, [pc, #508]	; (8002338 <HAL_RCC_OscConfig+0x4c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7e      	ldr	r2, [pc, #504]	; (8002338 <HAL_RCC_OscConfig+0x4c8>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7fe ffdd 	bl	8001104 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe ffd9 	bl	8001104 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e103      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b75      	ldr	r3, [pc, #468]	; (8002338 <HAL_RCC_OscConfig+0x4c8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x312>
 8002174:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e02d      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x334>
 800218a:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a69      	ldr	r2, [pc, #420]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a66      	ldr	r2, [pc, #408]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6213      	str	r3, [r2, #32]
 80021a2:	e01c      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0x356>
 80021ac:	4b61      	ldr	r3, [pc, #388]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4a60      	ldr	r2, [pc, #384]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021b2:	f043 0304 	orr.w	r3, r3, #4
 80021b6:	6213      	str	r3, [r2, #32]
 80021b8:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a5d      	ldr	r2, [pc, #372]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0x36e>
 80021c6:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4a5a      	ldr	r2, [pc, #360]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	6213      	str	r3, [r2, #32]
 80021d2:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a57      	ldr	r2, [pc, #348]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	f023 0304 	bic.w	r3, r3, #4
 80021dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d015      	beq.n	8002212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe ff8d 	bl	8001104 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe ff89 	bl	8001104 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0b1      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ee      	beq.n	80021ee <HAL_RCC_OscConfig+0x37e>
 8002210:	e014      	b.n	800223c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7fe ff77 	bl	8001104 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	e00a      	b.n	8002230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221a:	f7fe ff73 	bl	8001104 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e09b      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002230:	4b40      	ldr	r3, [pc, #256]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ee      	bne.n	800221a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d105      	bne.n	800224e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b3c      	ldr	r3, [pc, #240]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	4a3b      	ldr	r2, [pc, #236]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8087 	beq.w	8002366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b08      	cmp	r3, #8
 8002262:	d061      	beq.n	8002328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d146      	bne.n	80022fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_RCC_OscConfig+0x4cc>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe ff47 	bl	8001104 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7fe ff43 	bl	8001104 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e06d      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a0:	d108      	bne.n	80022b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022a2:	4b24      	ldr	r3, [pc, #144]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4921      	ldr	r1, [pc, #132]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a19      	ldr	r1, [r3, #32]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	430b      	orrs	r3, r1
 80022c6:	491b      	ldr	r1, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_RCC_OscConfig+0x4cc>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7fe ff17 	bl	8001104 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe ff13 	bl	8001104 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e03d      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCC_OscConfig+0x46a>
 80022f8:	e035      	b.n	8002366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_RCC_OscConfig+0x4cc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe ff00 	bl	8001104 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fefc 	bl	8001104 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e026      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x498>
 8002326:	e01e      	b.n	8002366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e019      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
 800233c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_OscConfig+0x500>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	429a      	cmp	r2, r3
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d0      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 0207 	bic.w	r2, r3, #7
 800239e:	4965      	ldr	r1, [pc, #404]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d040      	beq.n	8002494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e073      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06b      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4936      	ldr	r1, [pc, #216]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002464:	f7fe fe4e 	bl	8001104 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7fe fe4a 	bl	8001104 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e053      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d210      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0207 	bic.w	r2, r3, #7
 80024aa:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f821 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002506:	4602      	mov	r2, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	490a      	ldr	r1, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	5ccb      	ldrb	r3, [r1, r3]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1cc>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1d0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fdac 	bl	8001080 <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	08003bfc 	.word	0x08003bfc
 8002540:	20000000 	.word	0x20000000
 8002544:	20000004 	.word	0x20000004

08002548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d002      	beq.n	8002578 <HAL_RCC_GetSysClockFreq+0x30>
 8002572:	2b08      	cmp	r3, #8
 8002574:	d003      	beq.n	800257e <HAL_RCC_GetSysClockFreq+0x36>
 8002576:	e027      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	613b      	str	r3, [r7, #16]
      break;
 800257c:	e027      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	0c9b      	lsrs	r3, r3, #18
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a17      	ldr	r2, [pc, #92]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002588:	5cd3      	ldrb	r3, [r2, r3]
 800258a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d010      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	0c5b      	lsrs	r3, r3, #17
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025aa:	fb03 f202 	mul.w	r2, r3, r2
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	e004      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	613b      	str	r3, [r7, #16]
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ca:	613b      	str	r3, [r7, #16]
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	693b      	ldr	r3, [r7, #16]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	007a1200 	.word	0x007a1200
 80025e4:	08003c14 	.word	0x08003c14
 80025e8:	08003c24 	.word	0x08003c24
 80025ec:	003d0900 	.word	0x003d0900

080025f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_RCC_GetHCLKFreq+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff2 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	08003c0c 	.word	0x08003c0c

0800262c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002630:	f7ff ffde 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	0adb      	lsrs	r3, r3, #11
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021000 	.word	0x40021000
 8002650:	08003c0c 	.word	0x08003c0c

08002654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <RCC_Delay+0x34>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <RCC_Delay+0x38>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0a5b      	lsrs	r3, r3, #9
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002670:	bf00      	nop
  }
  while (Delay --);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1e5a      	subs	r2, r3, #1
 8002676:	60fa      	str	r2, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f9      	bne.n	8002670 <RCC_Delay+0x1c>
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	20000000 	.word	0x20000000
 800268c:	10624dd3 	.word	0x10624dd3

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d07d      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b0:	4b4f      	ldr	r3, [pc, #316]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10d      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	4a4b      	ldr	r2, [pc, #300]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c6:	61d3      	str	r3, [r2, #28]
 80026c8:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d4:	2301      	movs	r3, #1
 80026d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d118      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a42      	ldr	r2, [pc, #264]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f0:	f7fe fd08 	bl	8001104 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	e008      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f8:	f7fe fd04 	bl	8001104 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	; 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e06d      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b3a      	ldr	r3, [pc, #232]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d02e      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d027      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002734:	4b2e      	ldr	r3, [pc, #184]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800273e:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002744:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800274a:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d014      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe fcd3 	bl	8001104 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002762:	f7fe fccf 	bl	8001104 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002770:	4293      	cmp	r3, r2
 8002772:	d901      	bls.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e036      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ee      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4917      	ldr	r1, [pc, #92]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002792:	4313      	orrs	r3, r2
 8002794:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4a13      	ldr	r2, [pc, #76]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	490b      	ldr	r1, [pc, #44]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	4904      	ldr	r1, [pc, #16]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40007000 	.word	0x40007000
 80027f8:	42420440 	.word	0x42420440

080027fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b10      	cmp	r3, #16
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b10      	cmp	r3, #16
 8002822:	f200 808a 	bhi.w	800293a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d045      	beq.n	80028b8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d075      	beq.n	800291e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002832:	e082      	b.n	800293a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002834:	4b46      	ldr	r3, [pc, #280]	; (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800283a:	4b45      	ldr	r3, [pc, #276]	; (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d07b      	beq.n	800293e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	0c9b      	lsrs	r3, r3, #18
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	4a41      	ldr	r2, [pc, #260]	; (8002954 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d015      	beq.n	800288a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800285e:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	0c5b      	lsrs	r3, r3, #17
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002878:	4a38      	ldr	r2, [pc, #224]	; (800295c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	e004      	b.n	8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4a34      	ldr	r2, [pc, #208]	; (8002960 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002894:	4b2e      	ldr	r3, [pc, #184]	; (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a0:	d102      	bne.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	61bb      	str	r3, [r7, #24]
      break;
 80028a6:	e04a      	b.n	800293e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4a2d      	ldr	r2, [pc, #180]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	61bb      	str	r3, [r7, #24]
      break;
 80028b6:	e042      	b.n	800293e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c8:	d108      	bne.n	80028dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80028d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	e01f      	b.n	800291c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e6:	d109      	bne.n	80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80028e8:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80028f4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e00f      	b.n	800291c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002906:	d11c      	bne.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d016      	beq.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002914:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002918:	61bb      	str	r3, [r7, #24]
      break;
 800291a:	e012      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800291c:	e011      	b.n	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800291e:	f7ff fe85 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8002922:	4602      	mov	r2, r0
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	0b9b      	lsrs	r3, r3, #14
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	3301      	adds	r3, #1
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	61bb      	str	r3, [r7, #24]
      break;
 8002938:	e004      	b.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800293a:	bf00      	nop
 800293c:	e002      	b.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002942:	bf00      	nop
    }
  }
  return (frequency);
 8002944:	69bb      	ldr	r3, [r7, #24]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	08003c28 	.word	0x08003c28
 8002958:	08003c38 	.word	0x08003c38
 800295c:	007a1200 	.word	0x007a1200
 8002960:	003d0900 	.word	0x003d0900
 8002964:	aaaaaaab 	.word	0xaaaaaaab

08002968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e076      	b.n	8002a68 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800298a:	d009      	beq.n	80029a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	61da      	str	r2, [r3, #28]
 8002992:	e005      	b.n	80029a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fa38 	bl	8000e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	ea42 0103 	orr.w	r1, r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	0c1a      	lsrs	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f002 0204 	and.w	r2, r2, #4
 8002a46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_SPI_Transmit+0x22>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e12d      	b.n	8002cee <HAL_SPI_Transmit+0x27e>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a9a:	f7fe fb33 	bl	8001104 <HAL_GetTick>
 8002a9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d002      	beq.n	8002ab6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ab4:	e116      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_SPI_Transmit+0x52>
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ac6:	e10d      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2203      	movs	r2, #3
 8002acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	88fa      	ldrh	r2, [r7, #6]
 8002ae0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0e:	d10f      	bne.n	8002b30 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d007      	beq.n	8002b4e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b56:	d14f      	bne.n	8002bf8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_SPI_Transmit+0xf6>
 8002b60:	8afb      	ldrh	r3, [r7, #22]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d142      	bne.n	8002bec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	881a      	ldrh	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	1c9a      	adds	r2, r3, #2
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b8a:	e02f      	b.n	8002bec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d112      	bne.n	8002bc0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	1c9a      	adds	r2, r3, #2
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002bbe:	e015      	b.n	8002bec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bc0:	f7fe faa0 	bl	8001104 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d803      	bhi.n	8002bd8 <HAL_SPI_Transmit+0x168>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d102      	bne.n	8002bde <HAL_SPI_Transmit+0x16e>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002bea:	e07b      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1ca      	bne.n	8002b8c <HAL_SPI_Transmit+0x11c>
 8002bf6:	e050      	b.n	8002c9a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_Transmit+0x196>
 8002c00:	8afb      	ldrh	r3, [r7, #22]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d144      	bne.n	8002c90 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	330c      	adds	r3, #12
 8002c10:	7812      	ldrb	r2, [r2, #0]
 8002c12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002c2c:	e030      	b.n	8002c90 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d113      	bne.n	8002c64 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	330c      	adds	r3, #12
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c62:	e015      	b.n	8002c90 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c64:	f7fe fa4e 	bl	8001104 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d803      	bhi.n	8002c7c <HAL_SPI_Transmit+0x20c>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d102      	bne.n	8002c82 <HAL_SPI_Transmit+0x212>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002c8e:	e029      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1c9      	bne.n	8002c2e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f8b2 	bl	8002e08 <SPI_EndRxTxTransaction>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10a      	bne.n	8002cce <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	77fb      	strb	r3, [r7, #31]
 8002cda:	e003      	b.n	8002ce4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d08:	f7fe f9fc 	bl	8001104 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d18:	f7fe f9f4 	bl	8001104 <HAL_GetTick>
 8002d1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d1e:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	015b      	lsls	r3, r3, #5
 8002d24:	0d1b      	lsrs	r3, r3, #20
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d2e:	e054      	b.n	8002dda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d36:	d050      	beq.n	8002dda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d38:	f7fe f9e4 	bl	8001104 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d902      	bls.n	8002d4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d13d      	bne.n	8002dca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d66:	d111      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d70:	d004      	beq.n	8002d7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7a:	d107      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d94:	d10f      	bne.n	8002db6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e017      	b.n	8002dfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4013      	ands	r3, r2
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	bf0c      	ite	eq
 8002dea:	2301      	moveq	r3, #1
 8002dec:	2300      	movne	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d19b      	bne.n	8002d30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000000 	.word	0x20000000

08002e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff ff6a 	bl	8002cf8 <SPI_WaitFlagStateUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e000      	b.n	8002e3c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e042      	b.n	8002edc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe f81e 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2224      	movs	r2, #36	; 0x24
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f91d 	bl	80030c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d16d      	bne.n	8002fe0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d002      	beq.n	8002f10 <HAL_UART_Transmit+0x2c>
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e066      	b.n	8002fe2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2221      	movs	r2, #33	; 0x21
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f22:	f7fe f8ef 	bl	8001104 <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	88fa      	ldrh	r2, [r7, #6]
 8002f2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3c:	d108      	bne.n	8002f50 <HAL_UART_Transmit+0x6c>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d104      	bne.n	8002f50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	e003      	b.n	8002f58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f58:	e02a      	b.n	8002fb0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2200      	movs	r2, #0
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f840 	bl	8002fea <UART_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e036      	b.n	8002fe2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10b      	bne.n	8002f92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	e007      	b.n	8002fa2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1cf      	bne.n	8002f5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2140      	movs	r1, #64	; 0x40
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 f810 	bl	8002fea <UART_WaitOnFlagUntilTimeout>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e006      	b.n	8002fe2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3720      	adds	r7, #32
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b090      	sub	sp, #64	; 0x40
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffa:	e050      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d04c      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0x30>
 800300a:	f7fe f87b 	bl	8001104 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003016:	429a      	cmp	r2, r3
 8003018:	d241      	bcs.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800303a:	637a      	str	r2, [r7, #52]	; 0x34
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e5      	bne.n	800301a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3314      	adds	r3, #20
 8003054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	613b      	str	r3, [r7, #16]
   return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800306e:	623a      	str	r2, [r7, #32]
 8003070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	69f9      	ldr	r1, [r7, #28]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	61bb      	str	r3, [r7, #24]
   return(result);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e00f      	b.n	80030be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d09f      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3740      	adds	r7, #64	; 0x40
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003102:	f023 030c 	bic.w	r3, r3, #12
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	430b      	orrs	r3, r1
 800310e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2c      	ldr	r2, [pc, #176]	; (80031dc <UART_SetConfig+0x114>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d103      	bne.n	8003138 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003130:	f7ff fa7c 	bl	800262c <HAL_RCC_GetPCLK2Freq>
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	e002      	b.n	800313e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003138:	f7ff fa64 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 800313c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <UART_SetConfig+0x118>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	0119      	lsls	r1, r3, #4
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fbb2 f2f3 	udiv	r2, r2, r3
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <UART_SetConfig+0x118>)
 8003176:	fba3 0302 	umull	r0, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2064      	movs	r0, #100	; 0x64
 800317e:	fb00 f303 	mul.w	r3, r0, r3
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	3332      	adds	r3, #50	; 0x32
 8003188:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <UART_SetConfig+0x118>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003194:	4419      	add	r1, r3
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009a      	lsls	r2, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <UART_SetConfig+0x118>)
 80031ae:	fba3 0302 	umull	r0, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2064      	movs	r0, #100	; 0x64
 80031b6:	fb00 f303 	mul.w	r3, r0, r3
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	3332      	adds	r3, #50	; 0x32
 80031c0:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <UART_SetConfig+0x118>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	f003 020f 	and.w	r2, r3, #15
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	440a      	add	r2, r1
 80031d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40013800 	.word	0x40013800
 80031e0:	51eb851f 	.word	0x51eb851f

080031e4 <siprintf>:
 80031e4:	b40e      	push	{r1, r2, r3}
 80031e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031ea:	b500      	push	{lr}
 80031ec:	b09c      	sub	sp, #112	; 0x70
 80031ee:	ab1d      	add	r3, sp, #116	; 0x74
 80031f0:	9002      	str	r0, [sp, #8]
 80031f2:	9006      	str	r0, [sp, #24]
 80031f4:	9107      	str	r1, [sp, #28]
 80031f6:	9104      	str	r1, [sp, #16]
 80031f8:	4808      	ldr	r0, [pc, #32]	; (800321c <siprintf+0x38>)
 80031fa:	4909      	ldr	r1, [pc, #36]	; (8003220 <siprintf+0x3c>)
 80031fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003200:	9105      	str	r1, [sp, #20]
 8003202:	6800      	ldr	r0, [r0, #0]
 8003204:	a902      	add	r1, sp, #8
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	f000 f98e 	bl	8003528 <_svfiprintf_r>
 800320c:	2200      	movs	r2, #0
 800320e:	9b02      	ldr	r3, [sp, #8]
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	b01c      	add	sp, #112	; 0x70
 8003214:	f85d eb04 	ldr.w	lr, [sp], #4
 8003218:	b003      	add	sp, #12
 800321a:	4770      	bx	lr
 800321c:	20000058 	.word	0x20000058
 8003220:	ffff0208 	.word	0xffff0208

08003224 <memset>:
 8003224:	4603      	mov	r3, r0
 8003226:	4402      	add	r2, r0
 8003228:	4293      	cmp	r3, r2
 800322a:	d100      	bne.n	800322e <memset+0xa>
 800322c:	4770      	bx	lr
 800322e:	f803 1b01 	strb.w	r1, [r3], #1
 8003232:	e7f9      	b.n	8003228 <memset+0x4>

08003234 <__errno>:
 8003234:	4b01      	ldr	r3, [pc, #4]	; (800323c <__errno+0x8>)
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000058 	.word	0x20000058

08003240 <__libc_init_array>:
 8003240:	b570      	push	{r4, r5, r6, lr}
 8003242:	2600      	movs	r6, #0
 8003244:	4d0c      	ldr	r5, [pc, #48]	; (8003278 <__libc_init_array+0x38>)
 8003246:	4c0d      	ldr	r4, [pc, #52]	; (800327c <__libc_init_array+0x3c>)
 8003248:	1b64      	subs	r4, r4, r5
 800324a:	10a4      	asrs	r4, r4, #2
 800324c:	42a6      	cmp	r6, r4
 800324e:	d109      	bne.n	8003264 <__libc_init_array+0x24>
 8003250:	f000 fc7a 	bl	8003b48 <_init>
 8003254:	2600      	movs	r6, #0
 8003256:	4d0a      	ldr	r5, [pc, #40]	; (8003280 <__libc_init_array+0x40>)
 8003258:	4c0a      	ldr	r4, [pc, #40]	; (8003284 <__libc_init_array+0x44>)
 800325a:	1b64      	subs	r4, r4, r5
 800325c:	10a4      	asrs	r4, r4, #2
 800325e:	42a6      	cmp	r6, r4
 8003260:	d105      	bne.n	800326e <__libc_init_array+0x2e>
 8003262:	bd70      	pop	{r4, r5, r6, pc}
 8003264:	f855 3b04 	ldr.w	r3, [r5], #4
 8003268:	4798      	blx	r3
 800326a:	3601      	adds	r6, #1
 800326c:	e7ee      	b.n	800324c <__libc_init_array+0xc>
 800326e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003272:	4798      	blx	r3
 8003274:	3601      	adds	r6, #1
 8003276:	e7f2      	b.n	800325e <__libc_init_array+0x1e>
 8003278:	08003c70 	.word	0x08003c70
 800327c:	08003c70 	.word	0x08003c70
 8003280:	08003c70 	.word	0x08003c70
 8003284:	08003c74 	.word	0x08003c74

08003288 <__retarget_lock_acquire_recursive>:
 8003288:	4770      	bx	lr

0800328a <__retarget_lock_release_recursive>:
 800328a:	4770      	bx	lr

0800328c <_free_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	4605      	mov	r5, r0
 8003290:	2900      	cmp	r1, #0
 8003292:	d040      	beq.n	8003316 <_free_r+0x8a>
 8003294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003298:	1f0c      	subs	r4, r1, #4
 800329a:	2b00      	cmp	r3, #0
 800329c:	bfb8      	it	lt
 800329e:	18e4      	addlt	r4, r4, r3
 80032a0:	f000 f8dc 	bl	800345c <__malloc_lock>
 80032a4:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <_free_r+0x8c>)
 80032a6:	6813      	ldr	r3, [r2, #0]
 80032a8:	b933      	cbnz	r3, 80032b8 <_free_r+0x2c>
 80032aa:	6063      	str	r3, [r4, #4]
 80032ac:	6014      	str	r4, [r2, #0]
 80032ae:	4628      	mov	r0, r5
 80032b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032b4:	f000 b8d8 	b.w	8003468 <__malloc_unlock>
 80032b8:	42a3      	cmp	r3, r4
 80032ba:	d908      	bls.n	80032ce <_free_r+0x42>
 80032bc:	6820      	ldr	r0, [r4, #0]
 80032be:	1821      	adds	r1, r4, r0
 80032c0:	428b      	cmp	r3, r1
 80032c2:	bf01      	itttt	eq
 80032c4:	6819      	ldreq	r1, [r3, #0]
 80032c6:	685b      	ldreq	r3, [r3, #4]
 80032c8:	1809      	addeq	r1, r1, r0
 80032ca:	6021      	streq	r1, [r4, #0]
 80032cc:	e7ed      	b.n	80032aa <_free_r+0x1e>
 80032ce:	461a      	mov	r2, r3
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	b10b      	cbz	r3, 80032d8 <_free_r+0x4c>
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d9fa      	bls.n	80032ce <_free_r+0x42>
 80032d8:	6811      	ldr	r1, [r2, #0]
 80032da:	1850      	adds	r0, r2, r1
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d10b      	bne.n	80032f8 <_free_r+0x6c>
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	4401      	add	r1, r0
 80032e4:	1850      	adds	r0, r2, r1
 80032e6:	4283      	cmp	r3, r0
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	d1e0      	bne.n	80032ae <_free_r+0x22>
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4408      	add	r0, r1
 80032f2:	6010      	str	r0, [r2, #0]
 80032f4:	6053      	str	r3, [r2, #4]
 80032f6:	e7da      	b.n	80032ae <_free_r+0x22>
 80032f8:	d902      	bls.n	8003300 <_free_r+0x74>
 80032fa:	230c      	movs	r3, #12
 80032fc:	602b      	str	r3, [r5, #0]
 80032fe:	e7d6      	b.n	80032ae <_free_r+0x22>
 8003300:	6820      	ldr	r0, [r4, #0]
 8003302:	1821      	adds	r1, r4, r0
 8003304:	428b      	cmp	r3, r1
 8003306:	bf01      	itttt	eq
 8003308:	6819      	ldreq	r1, [r3, #0]
 800330a:	685b      	ldreq	r3, [r3, #4]
 800330c:	1809      	addeq	r1, r1, r0
 800330e:	6021      	streq	r1, [r4, #0]
 8003310:	6063      	str	r3, [r4, #4]
 8003312:	6054      	str	r4, [r2, #4]
 8003314:	e7cb      	b.n	80032ae <_free_r+0x22>
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	20000290 	.word	0x20000290

0800331c <sbrk_aligned>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4e0e      	ldr	r6, [pc, #56]	; (8003358 <sbrk_aligned+0x3c>)
 8003320:	460c      	mov	r4, r1
 8003322:	6831      	ldr	r1, [r6, #0]
 8003324:	4605      	mov	r5, r0
 8003326:	b911      	cbnz	r1, 800332e <sbrk_aligned+0x12>
 8003328:	f000 fbaa 	bl	8003a80 <_sbrk_r>
 800332c:	6030      	str	r0, [r6, #0]
 800332e:	4621      	mov	r1, r4
 8003330:	4628      	mov	r0, r5
 8003332:	f000 fba5 	bl	8003a80 <_sbrk_r>
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	d00a      	beq.n	8003350 <sbrk_aligned+0x34>
 800333a:	1cc4      	adds	r4, r0, #3
 800333c:	f024 0403 	bic.w	r4, r4, #3
 8003340:	42a0      	cmp	r0, r4
 8003342:	d007      	beq.n	8003354 <sbrk_aligned+0x38>
 8003344:	1a21      	subs	r1, r4, r0
 8003346:	4628      	mov	r0, r5
 8003348:	f000 fb9a 	bl	8003a80 <_sbrk_r>
 800334c:	3001      	adds	r0, #1
 800334e:	d101      	bne.n	8003354 <sbrk_aligned+0x38>
 8003350:	f04f 34ff 	mov.w	r4, #4294967295
 8003354:	4620      	mov	r0, r4
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	20000294 	.word	0x20000294

0800335c <_malloc_r>:
 800335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003360:	1ccd      	adds	r5, r1, #3
 8003362:	f025 0503 	bic.w	r5, r5, #3
 8003366:	3508      	adds	r5, #8
 8003368:	2d0c      	cmp	r5, #12
 800336a:	bf38      	it	cc
 800336c:	250c      	movcc	r5, #12
 800336e:	2d00      	cmp	r5, #0
 8003370:	4607      	mov	r7, r0
 8003372:	db01      	blt.n	8003378 <_malloc_r+0x1c>
 8003374:	42a9      	cmp	r1, r5
 8003376:	d905      	bls.n	8003384 <_malloc_r+0x28>
 8003378:	230c      	movs	r3, #12
 800337a:	2600      	movs	r6, #0
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	4630      	mov	r0, r6
 8003380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003384:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003458 <_malloc_r+0xfc>
 8003388:	f000 f868 	bl	800345c <__malloc_lock>
 800338c:	f8d8 3000 	ldr.w	r3, [r8]
 8003390:	461c      	mov	r4, r3
 8003392:	bb5c      	cbnz	r4, 80033ec <_malloc_r+0x90>
 8003394:	4629      	mov	r1, r5
 8003396:	4638      	mov	r0, r7
 8003398:	f7ff ffc0 	bl	800331c <sbrk_aligned>
 800339c:	1c43      	adds	r3, r0, #1
 800339e:	4604      	mov	r4, r0
 80033a0:	d155      	bne.n	800344e <_malloc_r+0xf2>
 80033a2:	f8d8 4000 	ldr.w	r4, [r8]
 80033a6:	4626      	mov	r6, r4
 80033a8:	2e00      	cmp	r6, #0
 80033aa:	d145      	bne.n	8003438 <_malloc_r+0xdc>
 80033ac:	2c00      	cmp	r4, #0
 80033ae:	d048      	beq.n	8003442 <_malloc_r+0xe6>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	4631      	mov	r1, r6
 80033b4:	4638      	mov	r0, r7
 80033b6:	eb04 0903 	add.w	r9, r4, r3
 80033ba:	f000 fb61 	bl	8003a80 <_sbrk_r>
 80033be:	4581      	cmp	r9, r0
 80033c0:	d13f      	bne.n	8003442 <_malloc_r+0xe6>
 80033c2:	6821      	ldr	r1, [r4, #0]
 80033c4:	4638      	mov	r0, r7
 80033c6:	1a6d      	subs	r5, r5, r1
 80033c8:	4629      	mov	r1, r5
 80033ca:	f7ff ffa7 	bl	800331c <sbrk_aligned>
 80033ce:	3001      	adds	r0, #1
 80033d0:	d037      	beq.n	8003442 <_malloc_r+0xe6>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	442b      	add	r3, r5
 80033d6:	6023      	str	r3, [r4, #0]
 80033d8:	f8d8 3000 	ldr.w	r3, [r8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d038      	beq.n	8003452 <_malloc_r+0xf6>
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	42a2      	cmp	r2, r4
 80033e4:	d12b      	bne.n	800343e <_malloc_r+0xe2>
 80033e6:	2200      	movs	r2, #0
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	e00f      	b.n	800340c <_malloc_r+0xb0>
 80033ec:	6822      	ldr	r2, [r4, #0]
 80033ee:	1b52      	subs	r2, r2, r5
 80033f0:	d41f      	bmi.n	8003432 <_malloc_r+0xd6>
 80033f2:	2a0b      	cmp	r2, #11
 80033f4:	d917      	bls.n	8003426 <_malloc_r+0xca>
 80033f6:	1961      	adds	r1, r4, r5
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	6025      	str	r5, [r4, #0]
 80033fc:	bf18      	it	ne
 80033fe:	6059      	strne	r1, [r3, #4]
 8003400:	6863      	ldr	r3, [r4, #4]
 8003402:	bf08      	it	eq
 8003404:	f8c8 1000 	streq.w	r1, [r8]
 8003408:	5162      	str	r2, [r4, r5]
 800340a:	604b      	str	r3, [r1, #4]
 800340c:	4638      	mov	r0, r7
 800340e:	f104 060b 	add.w	r6, r4, #11
 8003412:	f000 f829 	bl	8003468 <__malloc_unlock>
 8003416:	f026 0607 	bic.w	r6, r6, #7
 800341a:	1d23      	adds	r3, r4, #4
 800341c:	1af2      	subs	r2, r6, r3
 800341e:	d0ae      	beq.n	800337e <_malloc_r+0x22>
 8003420:	1b9b      	subs	r3, r3, r6
 8003422:	50a3      	str	r3, [r4, r2]
 8003424:	e7ab      	b.n	800337e <_malloc_r+0x22>
 8003426:	42a3      	cmp	r3, r4
 8003428:	6862      	ldr	r2, [r4, #4]
 800342a:	d1dd      	bne.n	80033e8 <_malloc_r+0x8c>
 800342c:	f8c8 2000 	str.w	r2, [r8]
 8003430:	e7ec      	b.n	800340c <_malloc_r+0xb0>
 8003432:	4623      	mov	r3, r4
 8003434:	6864      	ldr	r4, [r4, #4]
 8003436:	e7ac      	b.n	8003392 <_malloc_r+0x36>
 8003438:	4634      	mov	r4, r6
 800343a:	6876      	ldr	r6, [r6, #4]
 800343c:	e7b4      	b.n	80033a8 <_malloc_r+0x4c>
 800343e:	4613      	mov	r3, r2
 8003440:	e7cc      	b.n	80033dc <_malloc_r+0x80>
 8003442:	230c      	movs	r3, #12
 8003444:	4638      	mov	r0, r7
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	f000 f80e 	bl	8003468 <__malloc_unlock>
 800344c:	e797      	b.n	800337e <_malloc_r+0x22>
 800344e:	6025      	str	r5, [r4, #0]
 8003450:	e7dc      	b.n	800340c <_malloc_r+0xb0>
 8003452:	605b      	str	r3, [r3, #4]
 8003454:	deff      	udf	#255	; 0xff
 8003456:	bf00      	nop
 8003458:	20000290 	.word	0x20000290

0800345c <__malloc_lock>:
 800345c:	4801      	ldr	r0, [pc, #4]	; (8003464 <__malloc_lock+0x8>)
 800345e:	f7ff bf13 	b.w	8003288 <__retarget_lock_acquire_recursive>
 8003462:	bf00      	nop
 8003464:	2000028c 	.word	0x2000028c

08003468 <__malloc_unlock>:
 8003468:	4801      	ldr	r0, [pc, #4]	; (8003470 <__malloc_unlock+0x8>)
 800346a:	f7ff bf0e 	b.w	800328a <__retarget_lock_release_recursive>
 800346e:	bf00      	nop
 8003470:	2000028c 	.word	0x2000028c

08003474 <__ssputs_r>:
 8003474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003478:	461f      	mov	r7, r3
 800347a:	688e      	ldr	r6, [r1, #8]
 800347c:	4682      	mov	sl, r0
 800347e:	42be      	cmp	r6, r7
 8003480:	460c      	mov	r4, r1
 8003482:	4690      	mov	r8, r2
 8003484:	680b      	ldr	r3, [r1, #0]
 8003486:	d82c      	bhi.n	80034e2 <__ssputs_r+0x6e>
 8003488:	898a      	ldrh	r2, [r1, #12]
 800348a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800348e:	d026      	beq.n	80034de <__ssputs_r+0x6a>
 8003490:	6965      	ldr	r5, [r4, #20]
 8003492:	6909      	ldr	r1, [r1, #16]
 8003494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003498:	eba3 0901 	sub.w	r9, r3, r1
 800349c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034a0:	1c7b      	adds	r3, r7, #1
 80034a2:	444b      	add	r3, r9
 80034a4:	106d      	asrs	r5, r5, #1
 80034a6:	429d      	cmp	r5, r3
 80034a8:	bf38      	it	cc
 80034aa:	461d      	movcc	r5, r3
 80034ac:	0553      	lsls	r3, r2, #21
 80034ae:	d527      	bpl.n	8003500 <__ssputs_r+0x8c>
 80034b0:	4629      	mov	r1, r5
 80034b2:	f7ff ff53 	bl	800335c <_malloc_r>
 80034b6:	4606      	mov	r6, r0
 80034b8:	b360      	cbz	r0, 8003514 <__ssputs_r+0xa0>
 80034ba:	464a      	mov	r2, r9
 80034bc:	6921      	ldr	r1, [r4, #16]
 80034be:	f000 fafd 	bl	8003abc <memcpy>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034cc:	81a3      	strh	r3, [r4, #12]
 80034ce:	6126      	str	r6, [r4, #16]
 80034d0:	444e      	add	r6, r9
 80034d2:	6026      	str	r6, [r4, #0]
 80034d4:	463e      	mov	r6, r7
 80034d6:	6165      	str	r5, [r4, #20]
 80034d8:	eba5 0509 	sub.w	r5, r5, r9
 80034dc:	60a5      	str	r5, [r4, #8]
 80034de:	42be      	cmp	r6, r7
 80034e0:	d900      	bls.n	80034e4 <__ssputs_r+0x70>
 80034e2:	463e      	mov	r6, r7
 80034e4:	4632      	mov	r2, r6
 80034e6:	4641      	mov	r1, r8
 80034e8:	6820      	ldr	r0, [r4, #0]
 80034ea:	f000 faaf 	bl	8003a4c <memmove>
 80034ee:	2000      	movs	r0, #0
 80034f0:	68a3      	ldr	r3, [r4, #8]
 80034f2:	1b9b      	subs	r3, r3, r6
 80034f4:	60a3      	str	r3, [r4, #8]
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	4433      	add	r3, r6
 80034fa:	6023      	str	r3, [r4, #0]
 80034fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003500:	462a      	mov	r2, r5
 8003502:	f000 fae9 	bl	8003ad8 <_realloc_r>
 8003506:	4606      	mov	r6, r0
 8003508:	2800      	cmp	r0, #0
 800350a:	d1e0      	bne.n	80034ce <__ssputs_r+0x5a>
 800350c:	4650      	mov	r0, sl
 800350e:	6921      	ldr	r1, [r4, #16]
 8003510:	f7ff febc 	bl	800328c <_free_r>
 8003514:	230c      	movs	r3, #12
 8003516:	f8ca 3000 	str.w	r3, [sl]
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	e7e9      	b.n	80034fc <__ssputs_r+0x88>

08003528 <_svfiprintf_r>:
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	4698      	mov	r8, r3
 800352e:	898b      	ldrh	r3, [r1, #12]
 8003530:	4607      	mov	r7, r0
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	460d      	mov	r5, r1
 8003536:	4614      	mov	r4, r2
 8003538:	b09d      	sub	sp, #116	; 0x74
 800353a:	d50e      	bpl.n	800355a <_svfiprintf_r+0x32>
 800353c:	690b      	ldr	r3, [r1, #16]
 800353e:	b963      	cbnz	r3, 800355a <_svfiprintf_r+0x32>
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	f7ff ff0b 	bl	800335c <_malloc_r>
 8003546:	6028      	str	r0, [r5, #0]
 8003548:	6128      	str	r0, [r5, #16]
 800354a:	b920      	cbnz	r0, 8003556 <_svfiprintf_r+0x2e>
 800354c:	230c      	movs	r3, #12
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	e0d0      	b.n	80036f8 <_svfiprintf_r+0x1d0>
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	616b      	str	r3, [r5, #20]
 800355a:	2300      	movs	r3, #0
 800355c:	9309      	str	r3, [sp, #36]	; 0x24
 800355e:	2320      	movs	r3, #32
 8003560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003564:	2330      	movs	r3, #48	; 0x30
 8003566:	f04f 0901 	mov.w	r9, #1
 800356a:	f8cd 800c 	str.w	r8, [sp, #12]
 800356e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003710 <_svfiprintf_r+0x1e8>
 8003572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003576:	4623      	mov	r3, r4
 8003578:	469a      	mov	sl, r3
 800357a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800357e:	b10a      	cbz	r2, 8003584 <_svfiprintf_r+0x5c>
 8003580:	2a25      	cmp	r2, #37	; 0x25
 8003582:	d1f9      	bne.n	8003578 <_svfiprintf_r+0x50>
 8003584:	ebba 0b04 	subs.w	fp, sl, r4
 8003588:	d00b      	beq.n	80035a2 <_svfiprintf_r+0x7a>
 800358a:	465b      	mov	r3, fp
 800358c:	4622      	mov	r2, r4
 800358e:	4629      	mov	r1, r5
 8003590:	4638      	mov	r0, r7
 8003592:	f7ff ff6f 	bl	8003474 <__ssputs_r>
 8003596:	3001      	adds	r0, #1
 8003598:	f000 80a9 	beq.w	80036ee <_svfiprintf_r+0x1c6>
 800359c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800359e:	445a      	add	r2, fp
 80035a0:	9209      	str	r2, [sp, #36]	; 0x24
 80035a2:	f89a 3000 	ldrb.w	r3, [sl]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80a1 	beq.w	80036ee <_svfiprintf_r+0x1c6>
 80035ac:	2300      	movs	r3, #0
 80035ae:	f04f 32ff 	mov.w	r2, #4294967295
 80035b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035b6:	f10a 0a01 	add.w	sl, sl, #1
 80035ba:	9304      	str	r3, [sp, #16]
 80035bc:	9307      	str	r3, [sp, #28]
 80035be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035c2:	931a      	str	r3, [sp, #104]	; 0x68
 80035c4:	4654      	mov	r4, sl
 80035c6:	2205      	movs	r2, #5
 80035c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035cc:	4850      	ldr	r0, [pc, #320]	; (8003710 <_svfiprintf_r+0x1e8>)
 80035ce:	f000 fa67 	bl	8003aa0 <memchr>
 80035d2:	9a04      	ldr	r2, [sp, #16]
 80035d4:	b9d8      	cbnz	r0, 800360e <_svfiprintf_r+0xe6>
 80035d6:	06d0      	lsls	r0, r2, #27
 80035d8:	bf44      	itt	mi
 80035da:	2320      	movmi	r3, #32
 80035dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035e0:	0711      	lsls	r1, r2, #28
 80035e2:	bf44      	itt	mi
 80035e4:	232b      	movmi	r3, #43	; 0x2b
 80035e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035ea:	f89a 3000 	ldrb.w	r3, [sl]
 80035ee:	2b2a      	cmp	r3, #42	; 0x2a
 80035f0:	d015      	beq.n	800361e <_svfiprintf_r+0xf6>
 80035f2:	4654      	mov	r4, sl
 80035f4:	2000      	movs	r0, #0
 80035f6:	f04f 0c0a 	mov.w	ip, #10
 80035fa:	9a07      	ldr	r2, [sp, #28]
 80035fc:	4621      	mov	r1, r4
 80035fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003602:	3b30      	subs	r3, #48	; 0x30
 8003604:	2b09      	cmp	r3, #9
 8003606:	d94d      	bls.n	80036a4 <_svfiprintf_r+0x17c>
 8003608:	b1b0      	cbz	r0, 8003638 <_svfiprintf_r+0x110>
 800360a:	9207      	str	r2, [sp, #28]
 800360c:	e014      	b.n	8003638 <_svfiprintf_r+0x110>
 800360e:	eba0 0308 	sub.w	r3, r0, r8
 8003612:	fa09 f303 	lsl.w	r3, r9, r3
 8003616:	4313      	orrs	r3, r2
 8003618:	46a2      	mov	sl, r4
 800361a:	9304      	str	r3, [sp, #16]
 800361c:	e7d2      	b.n	80035c4 <_svfiprintf_r+0x9c>
 800361e:	9b03      	ldr	r3, [sp, #12]
 8003620:	1d19      	adds	r1, r3, #4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	9103      	str	r1, [sp, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	bfbb      	ittet	lt
 800362a:	425b      	neglt	r3, r3
 800362c:	f042 0202 	orrlt.w	r2, r2, #2
 8003630:	9307      	strge	r3, [sp, #28]
 8003632:	9307      	strlt	r3, [sp, #28]
 8003634:	bfb8      	it	lt
 8003636:	9204      	strlt	r2, [sp, #16]
 8003638:	7823      	ldrb	r3, [r4, #0]
 800363a:	2b2e      	cmp	r3, #46	; 0x2e
 800363c:	d10c      	bne.n	8003658 <_svfiprintf_r+0x130>
 800363e:	7863      	ldrb	r3, [r4, #1]
 8003640:	2b2a      	cmp	r3, #42	; 0x2a
 8003642:	d134      	bne.n	80036ae <_svfiprintf_r+0x186>
 8003644:	9b03      	ldr	r3, [sp, #12]
 8003646:	3402      	adds	r4, #2
 8003648:	1d1a      	adds	r2, r3, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	9203      	str	r2, [sp, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	bfb8      	it	lt
 8003652:	f04f 33ff 	movlt.w	r3, #4294967295
 8003656:	9305      	str	r3, [sp, #20]
 8003658:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003714 <_svfiprintf_r+0x1ec>
 800365c:	2203      	movs	r2, #3
 800365e:	4650      	mov	r0, sl
 8003660:	7821      	ldrb	r1, [r4, #0]
 8003662:	f000 fa1d 	bl	8003aa0 <memchr>
 8003666:	b138      	cbz	r0, 8003678 <_svfiprintf_r+0x150>
 8003668:	2240      	movs	r2, #64	; 0x40
 800366a:	9b04      	ldr	r3, [sp, #16]
 800366c:	eba0 000a 	sub.w	r0, r0, sl
 8003670:	4082      	lsls	r2, r0
 8003672:	4313      	orrs	r3, r2
 8003674:	3401      	adds	r4, #1
 8003676:	9304      	str	r3, [sp, #16]
 8003678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800367c:	2206      	movs	r2, #6
 800367e:	4826      	ldr	r0, [pc, #152]	; (8003718 <_svfiprintf_r+0x1f0>)
 8003680:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003684:	f000 fa0c 	bl	8003aa0 <memchr>
 8003688:	2800      	cmp	r0, #0
 800368a:	d038      	beq.n	80036fe <_svfiprintf_r+0x1d6>
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <_svfiprintf_r+0x1f4>)
 800368e:	bb1b      	cbnz	r3, 80036d8 <_svfiprintf_r+0x1b0>
 8003690:	9b03      	ldr	r3, [sp, #12]
 8003692:	3307      	adds	r3, #7
 8003694:	f023 0307 	bic.w	r3, r3, #7
 8003698:	3308      	adds	r3, #8
 800369a:	9303      	str	r3, [sp, #12]
 800369c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800369e:	4433      	add	r3, r6
 80036a0:	9309      	str	r3, [sp, #36]	; 0x24
 80036a2:	e768      	b.n	8003576 <_svfiprintf_r+0x4e>
 80036a4:	460c      	mov	r4, r1
 80036a6:	2001      	movs	r0, #1
 80036a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80036ac:	e7a6      	b.n	80035fc <_svfiprintf_r+0xd4>
 80036ae:	2300      	movs	r3, #0
 80036b0:	f04f 0c0a 	mov.w	ip, #10
 80036b4:	4619      	mov	r1, r3
 80036b6:	3401      	adds	r4, #1
 80036b8:	9305      	str	r3, [sp, #20]
 80036ba:	4620      	mov	r0, r4
 80036bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036c0:	3a30      	subs	r2, #48	; 0x30
 80036c2:	2a09      	cmp	r2, #9
 80036c4:	d903      	bls.n	80036ce <_svfiprintf_r+0x1a6>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0c6      	beq.n	8003658 <_svfiprintf_r+0x130>
 80036ca:	9105      	str	r1, [sp, #20]
 80036cc:	e7c4      	b.n	8003658 <_svfiprintf_r+0x130>
 80036ce:	4604      	mov	r4, r0
 80036d0:	2301      	movs	r3, #1
 80036d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80036d6:	e7f0      	b.n	80036ba <_svfiprintf_r+0x192>
 80036d8:	ab03      	add	r3, sp, #12
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	462a      	mov	r2, r5
 80036de:	4638      	mov	r0, r7
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <_svfiprintf_r+0x1f8>)
 80036e2:	a904      	add	r1, sp, #16
 80036e4:	f3af 8000 	nop.w
 80036e8:	1c42      	adds	r2, r0, #1
 80036ea:	4606      	mov	r6, r0
 80036ec:	d1d6      	bne.n	800369c <_svfiprintf_r+0x174>
 80036ee:	89ab      	ldrh	r3, [r5, #12]
 80036f0:	065b      	lsls	r3, r3, #25
 80036f2:	f53f af2d 	bmi.w	8003550 <_svfiprintf_r+0x28>
 80036f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036f8:	b01d      	add	sp, #116	; 0x74
 80036fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036fe:	ab03      	add	r3, sp, #12
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	462a      	mov	r2, r5
 8003704:	4638      	mov	r0, r7
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <_svfiprintf_r+0x1f8>)
 8003708:	a904      	add	r1, sp, #16
 800370a:	f000 f87d 	bl	8003808 <_printf_i>
 800370e:	e7eb      	b.n	80036e8 <_svfiprintf_r+0x1c0>
 8003710:	08003c3a 	.word	0x08003c3a
 8003714:	08003c40 	.word	0x08003c40
 8003718:	08003c44 	.word	0x08003c44
 800371c:	00000000 	.word	0x00000000
 8003720:	08003475 	.word	0x08003475

08003724 <_printf_common>:
 8003724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003728:	4616      	mov	r6, r2
 800372a:	4699      	mov	r9, r3
 800372c:	688a      	ldr	r2, [r1, #8]
 800372e:	690b      	ldr	r3, [r1, #16]
 8003730:	4607      	mov	r7, r0
 8003732:	4293      	cmp	r3, r2
 8003734:	bfb8      	it	lt
 8003736:	4613      	movlt	r3, r2
 8003738:	6033      	str	r3, [r6, #0]
 800373a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800373e:	460c      	mov	r4, r1
 8003740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003744:	b10a      	cbz	r2, 800374a <_printf_common+0x26>
 8003746:	3301      	adds	r3, #1
 8003748:	6033      	str	r3, [r6, #0]
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	0699      	lsls	r1, r3, #26
 800374e:	bf42      	ittt	mi
 8003750:	6833      	ldrmi	r3, [r6, #0]
 8003752:	3302      	addmi	r3, #2
 8003754:	6033      	strmi	r3, [r6, #0]
 8003756:	6825      	ldr	r5, [r4, #0]
 8003758:	f015 0506 	ands.w	r5, r5, #6
 800375c:	d106      	bne.n	800376c <_printf_common+0x48>
 800375e:	f104 0a19 	add.w	sl, r4, #25
 8003762:	68e3      	ldr	r3, [r4, #12]
 8003764:	6832      	ldr	r2, [r6, #0]
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	42ab      	cmp	r3, r5
 800376a:	dc2b      	bgt.n	80037c4 <_printf_common+0xa0>
 800376c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003770:	1e13      	subs	r3, r2, #0
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	bf18      	it	ne
 8003776:	2301      	movne	r3, #1
 8003778:	0692      	lsls	r2, r2, #26
 800377a:	d430      	bmi.n	80037de <_printf_common+0xba>
 800377c:	4649      	mov	r1, r9
 800377e:	4638      	mov	r0, r7
 8003780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003784:	47c0      	blx	r8
 8003786:	3001      	adds	r0, #1
 8003788:	d023      	beq.n	80037d2 <_printf_common+0xae>
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	6922      	ldr	r2, [r4, #16]
 800378e:	f003 0306 	and.w	r3, r3, #6
 8003792:	2b04      	cmp	r3, #4
 8003794:	bf14      	ite	ne
 8003796:	2500      	movne	r5, #0
 8003798:	6833      	ldreq	r3, [r6, #0]
 800379a:	f04f 0600 	mov.w	r6, #0
 800379e:	bf08      	it	eq
 80037a0:	68e5      	ldreq	r5, [r4, #12]
 80037a2:	f104 041a 	add.w	r4, r4, #26
 80037a6:	bf08      	it	eq
 80037a8:	1aed      	subeq	r5, r5, r3
 80037aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037ae:	bf08      	it	eq
 80037b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037b4:	4293      	cmp	r3, r2
 80037b6:	bfc4      	itt	gt
 80037b8:	1a9b      	subgt	r3, r3, r2
 80037ba:	18ed      	addgt	r5, r5, r3
 80037bc:	42b5      	cmp	r5, r6
 80037be:	d11a      	bne.n	80037f6 <_printf_common+0xd2>
 80037c0:	2000      	movs	r0, #0
 80037c2:	e008      	b.n	80037d6 <_printf_common+0xb2>
 80037c4:	2301      	movs	r3, #1
 80037c6:	4652      	mov	r2, sl
 80037c8:	4649      	mov	r1, r9
 80037ca:	4638      	mov	r0, r7
 80037cc:	47c0      	blx	r8
 80037ce:	3001      	adds	r0, #1
 80037d0:	d103      	bne.n	80037da <_printf_common+0xb6>
 80037d2:	f04f 30ff 	mov.w	r0, #4294967295
 80037d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037da:	3501      	adds	r5, #1
 80037dc:	e7c1      	b.n	8003762 <_printf_common+0x3e>
 80037de:	2030      	movs	r0, #48	; 0x30
 80037e0:	18e1      	adds	r1, r4, r3
 80037e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037ec:	4422      	add	r2, r4
 80037ee:	3302      	adds	r3, #2
 80037f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037f4:	e7c2      	b.n	800377c <_printf_common+0x58>
 80037f6:	2301      	movs	r3, #1
 80037f8:	4622      	mov	r2, r4
 80037fa:	4649      	mov	r1, r9
 80037fc:	4638      	mov	r0, r7
 80037fe:	47c0      	blx	r8
 8003800:	3001      	adds	r0, #1
 8003802:	d0e6      	beq.n	80037d2 <_printf_common+0xae>
 8003804:	3601      	adds	r6, #1
 8003806:	e7d9      	b.n	80037bc <_printf_common+0x98>

08003808 <_printf_i>:
 8003808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	7e0f      	ldrb	r7, [r1, #24]
 800380e:	4691      	mov	r9, r2
 8003810:	2f78      	cmp	r7, #120	; 0x78
 8003812:	4680      	mov	r8, r0
 8003814:	460c      	mov	r4, r1
 8003816:	469a      	mov	sl, r3
 8003818:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800381a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800381e:	d807      	bhi.n	8003830 <_printf_i+0x28>
 8003820:	2f62      	cmp	r7, #98	; 0x62
 8003822:	d80a      	bhi.n	800383a <_printf_i+0x32>
 8003824:	2f00      	cmp	r7, #0
 8003826:	f000 80d5 	beq.w	80039d4 <_printf_i+0x1cc>
 800382a:	2f58      	cmp	r7, #88	; 0x58
 800382c:	f000 80c1 	beq.w	80039b2 <_printf_i+0x1aa>
 8003830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003838:	e03a      	b.n	80038b0 <_printf_i+0xa8>
 800383a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800383e:	2b15      	cmp	r3, #21
 8003840:	d8f6      	bhi.n	8003830 <_printf_i+0x28>
 8003842:	a101      	add	r1, pc, #4	; (adr r1, 8003848 <_printf_i+0x40>)
 8003844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003848:	080038a1 	.word	0x080038a1
 800384c:	080038b5 	.word	0x080038b5
 8003850:	08003831 	.word	0x08003831
 8003854:	08003831 	.word	0x08003831
 8003858:	08003831 	.word	0x08003831
 800385c:	08003831 	.word	0x08003831
 8003860:	080038b5 	.word	0x080038b5
 8003864:	08003831 	.word	0x08003831
 8003868:	08003831 	.word	0x08003831
 800386c:	08003831 	.word	0x08003831
 8003870:	08003831 	.word	0x08003831
 8003874:	080039bb 	.word	0x080039bb
 8003878:	080038e1 	.word	0x080038e1
 800387c:	08003975 	.word	0x08003975
 8003880:	08003831 	.word	0x08003831
 8003884:	08003831 	.word	0x08003831
 8003888:	080039dd 	.word	0x080039dd
 800388c:	08003831 	.word	0x08003831
 8003890:	080038e1 	.word	0x080038e1
 8003894:	08003831 	.word	0x08003831
 8003898:	08003831 	.word	0x08003831
 800389c:	0800397d 	.word	0x0800397d
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	1d1a      	adds	r2, r3, #4
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	602a      	str	r2, [r5, #0]
 80038a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0a0      	b.n	80039f6 <_printf_i+0x1ee>
 80038b4:	6820      	ldr	r0, [r4, #0]
 80038b6:	682b      	ldr	r3, [r5, #0]
 80038b8:	0607      	lsls	r7, r0, #24
 80038ba:	f103 0104 	add.w	r1, r3, #4
 80038be:	6029      	str	r1, [r5, #0]
 80038c0:	d501      	bpl.n	80038c6 <_printf_i+0xbe>
 80038c2:	681e      	ldr	r6, [r3, #0]
 80038c4:	e003      	b.n	80038ce <_printf_i+0xc6>
 80038c6:	0646      	lsls	r6, r0, #25
 80038c8:	d5fb      	bpl.n	80038c2 <_printf_i+0xba>
 80038ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038ce:	2e00      	cmp	r6, #0
 80038d0:	da03      	bge.n	80038da <_printf_i+0xd2>
 80038d2:	232d      	movs	r3, #45	; 0x2d
 80038d4:	4276      	negs	r6, r6
 80038d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038da:	230a      	movs	r3, #10
 80038dc:	4859      	ldr	r0, [pc, #356]	; (8003a44 <_printf_i+0x23c>)
 80038de:	e012      	b.n	8003906 <_printf_i+0xfe>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	1d19      	adds	r1, r3, #4
 80038e6:	6029      	str	r1, [r5, #0]
 80038e8:	0605      	lsls	r5, r0, #24
 80038ea:	d501      	bpl.n	80038f0 <_printf_i+0xe8>
 80038ec:	681e      	ldr	r6, [r3, #0]
 80038ee:	e002      	b.n	80038f6 <_printf_i+0xee>
 80038f0:	0641      	lsls	r1, r0, #25
 80038f2:	d5fb      	bpl.n	80038ec <_printf_i+0xe4>
 80038f4:	881e      	ldrh	r6, [r3, #0]
 80038f6:	2f6f      	cmp	r7, #111	; 0x6f
 80038f8:	bf0c      	ite	eq
 80038fa:	2308      	moveq	r3, #8
 80038fc:	230a      	movne	r3, #10
 80038fe:	4851      	ldr	r0, [pc, #324]	; (8003a44 <_printf_i+0x23c>)
 8003900:	2100      	movs	r1, #0
 8003902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003906:	6865      	ldr	r5, [r4, #4]
 8003908:	2d00      	cmp	r5, #0
 800390a:	bfa8      	it	ge
 800390c:	6821      	ldrge	r1, [r4, #0]
 800390e:	60a5      	str	r5, [r4, #8]
 8003910:	bfa4      	itt	ge
 8003912:	f021 0104 	bicge.w	r1, r1, #4
 8003916:	6021      	strge	r1, [r4, #0]
 8003918:	b90e      	cbnz	r6, 800391e <_printf_i+0x116>
 800391a:	2d00      	cmp	r5, #0
 800391c:	d04b      	beq.n	80039b6 <_printf_i+0x1ae>
 800391e:	4615      	mov	r5, r2
 8003920:	fbb6 f1f3 	udiv	r1, r6, r3
 8003924:	fb03 6711 	mls	r7, r3, r1, r6
 8003928:	5dc7      	ldrb	r7, [r0, r7]
 800392a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800392e:	4637      	mov	r7, r6
 8003930:	42bb      	cmp	r3, r7
 8003932:	460e      	mov	r6, r1
 8003934:	d9f4      	bls.n	8003920 <_printf_i+0x118>
 8003936:	2b08      	cmp	r3, #8
 8003938:	d10b      	bne.n	8003952 <_printf_i+0x14a>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	07de      	lsls	r6, r3, #31
 800393e:	d508      	bpl.n	8003952 <_printf_i+0x14a>
 8003940:	6923      	ldr	r3, [r4, #16]
 8003942:	6861      	ldr	r1, [r4, #4]
 8003944:	4299      	cmp	r1, r3
 8003946:	bfde      	ittt	le
 8003948:	2330      	movle	r3, #48	; 0x30
 800394a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800394e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003952:	1b52      	subs	r2, r2, r5
 8003954:	6122      	str	r2, [r4, #16]
 8003956:	464b      	mov	r3, r9
 8003958:	4621      	mov	r1, r4
 800395a:	4640      	mov	r0, r8
 800395c:	f8cd a000 	str.w	sl, [sp]
 8003960:	aa03      	add	r2, sp, #12
 8003962:	f7ff fedf 	bl	8003724 <_printf_common>
 8003966:	3001      	adds	r0, #1
 8003968:	d14a      	bne.n	8003a00 <_printf_i+0x1f8>
 800396a:	f04f 30ff 	mov.w	r0, #4294967295
 800396e:	b004      	add	sp, #16
 8003970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	f043 0320 	orr.w	r3, r3, #32
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	2778      	movs	r7, #120	; 0x78
 800397e:	4832      	ldr	r0, [pc, #200]	; (8003a48 <_printf_i+0x240>)
 8003980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	6829      	ldr	r1, [r5, #0]
 8003988:	061f      	lsls	r7, r3, #24
 800398a:	f851 6b04 	ldr.w	r6, [r1], #4
 800398e:	d402      	bmi.n	8003996 <_printf_i+0x18e>
 8003990:	065f      	lsls	r7, r3, #25
 8003992:	bf48      	it	mi
 8003994:	b2b6      	uxthmi	r6, r6
 8003996:	07df      	lsls	r7, r3, #31
 8003998:	bf48      	it	mi
 800399a:	f043 0320 	orrmi.w	r3, r3, #32
 800399e:	6029      	str	r1, [r5, #0]
 80039a0:	bf48      	it	mi
 80039a2:	6023      	strmi	r3, [r4, #0]
 80039a4:	b91e      	cbnz	r6, 80039ae <_printf_i+0x1a6>
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	f023 0320 	bic.w	r3, r3, #32
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	2310      	movs	r3, #16
 80039b0:	e7a6      	b.n	8003900 <_printf_i+0xf8>
 80039b2:	4824      	ldr	r0, [pc, #144]	; (8003a44 <_printf_i+0x23c>)
 80039b4:	e7e4      	b.n	8003980 <_printf_i+0x178>
 80039b6:	4615      	mov	r5, r2
 80039b8:	e7bd      	b.n	8003936 <_printf_i+0x12e>
 80039ba:	682b      	ldr	r3, [r5, #0]
 80039bc:	6826      	ldr	r6, [r4, #0]
 80039be:	1d18      	adds	r0, r3, #4
 80039c0:	6961      	ldr	r1, [r4, #20]
 80039c2:	6028      	str	r0, [r5, #0]
 80039c4:	0635      	lsls	r5, r6, #24
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	d501      	bpl.n	80039ce <_printf_i+0x1c6>
 80039ca:	6019      	str	r1, [r3, #0]
 80039cc:	e002      	b.n	80039d4 <_printf_i+0x1cc>
 80039ce:	0670      	lsls	r0, r6, #25
 80039d0:	d5fb      	bpl.n	80039ca <_printf_i+0x1c2>
 80039d2:	8019      	strh	r1, [r3, #0]
 80039d4:	2300      	movs	r3, #0
 80039d6:	4615      	mov	r5, r2
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	e7bc      	b.n	8003956 <_printf_i+0x14e>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	2100      	movs	r1, #0
 80039e0:	1d1a      	adds	r2, r3, #4
 80039e2:	602a      	str	r2, [r5, #0]
 80039e4:	681d      	ldr	r5, [r3, #0]
 80039e6:	6862      	ldr	r2, [r4, #4]
 80039e8:	4628      	mov	r0, r5
 80039ea:	f000 f859 	bl	8003aa0 <memchr>
 80039ee:	b108      	cbz	r0, 80039f4 <_printf_i+0x1ec>
 80039f0:	1b40      	subs	r0, r0, r5
 80039f2:	6060      	str	r0, [r4, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	6123      	str	r3, [r4, #16]
 80039f8:	2300      	movs	r3, #0
 80039fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fe:	e7aa      	b.n	8003956 <_printf_i+0x14e>
 8003a00:	462a      	mov	r2, r5
 8003a02:	4649      	mov	r1, r9
 8003a04:	4640      	mov	r0, r8
 8003a06:	6923      	ldr	r3, [r4, #16]
 8003a08:	47d0      	blx	sl
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d0ad      	beq.n	800396a <_printf_i+0x162>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	079b      	lsls	r3, r3, #30
 8003a12:	d413      	bmi.n	8003a3c <_printf_i+0x234>
 8003a14:	68e0      	ldr	r0, [r4, #12]
 8003a16:	9b03      	ldr	r3, [sp, #12]
 8003a18:	4298      	cmp	r0, r3
 8003a1a:	bfb8      	it	lt
 8003a1c:	4618      	movlt	r0, r3
 8003a1e:	e7a6      	b.n	800396e <_printf_i+0x166>
 8003a20:	2301      	movs	r3, #1
 8003a22:	4632      	mov	r2, r6
 8003a24:	4649      	mov	r1, r9
 8003a26:	4640      	mov	r0, r8
 8003a28:	47d0      	blx	sl
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d09d      	beq.n	800396a <_printf_i+0x162>
 8003a2e:	3501      	adds	r5, #1
 8003a30:	68e3      	ldr	r3, [r4, #12]
 8003a32:	9903      	ldr	r1, [sp, #12]
 8003a34:	1a5b      	subs	r3, r3, r1
 8003a36:	42ab      	cmp	r3, r5
 8003a38:	dcf2      	bgt.n	8003a20 <_printf_i+0x218>
 8003a3a:	e7eb      	b.n	8003a14 <_printf_i+0x20c>
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	f104 0619 	add.w	r6, r4, #25
 8003a42:	e7f5      	b.n	8003a30 <_printf_i+0x228>
 8003a44:	08003c4b 	.word	0x08003c4b
 8003a48:	08003c5c 	.word	0x08003c5c

08003a4c <memmove>:
 8003a4c:	4288      	cmp	r0, r1
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	eb01 0402 	add.w	r4, r1, r2
 8003a54:	d902      	bls.n	8003a5c <memmove+0x10>
 8003a56:	4284      	cmp	r4, r0
 8003a58:	4623      	mov	r3, r4
 8003a5a:	d807      	bhi.n	8003a6c <memmove+0x20>
 8003a5c:	1e43      	subs	r3, r0, #1
 8003a5e:	42a1      	cmp	r1, r4
 8003a60:	d008      	beq.n	8003a74 <memmove+0x28>
 8003a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a6a:	e7f8      	b.n	8003a5e <memmove+0x12>
 8003a6c:	4601      	mov	r1, r0
 8003a6e:	4402      	add	r2, r0
 8003a70:	428a      	cmp	r2, r1
 8003a72:	d100      	bne.n	8003a76 <memmove+0x2a>
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a7e:	e7f7      	b.n	8003a70 <memmove+0x24>

08003a80 <_sbrk_r>:
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	2300      	movs	r3, #0
 8003a84:	4d05      	ldr	r5, [pc, #20]	; (8003a9c <_sbrk_r+0x1c>)
 8003a86:	4604      	mov	r4, r0
 8003a88:	4608      	mov	r0, r1
 8003a8a:	602b      	str	r3, [r5, #0]
 8003a8c:	f7fd fa80 	bl	8000f90 <_sbrk>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_sbrk_r+0x1a>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_sbrk_r+0x1a>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	20000288 	.word	0x20000288

08003aa0 <memchr>:
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	b510      	push	{r4, lr}
 8003aa4:	b2c9      	uxtb	r1, r1
 8003aa6:	4402      	add	r2, r0
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	d101      	bne.n	8003ab2 <memchr+0x12>
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e003      	b.n	8003aba <memchr+0x1a>
 8003ab2:	7804      	ldrb	r4, [r0, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	428c      	cmp	r4, r1
 8003ab8:	d1f6      	bne.n	8003aa8 <memchr+0x8>
 8003aba:	bd10      	pop	{r4, pc}

08003abc <memcpy>:
 8003abc:	440a      	add	r2, r1
 8003abe:	4291      	cmp	r1, r2
 8003ac0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ac4:	d100      	bne.n	8003ac8 <memcpy+0xc>
 8003ac6:	4770      	bx	lr
 8003ac8:	b510      	push	{r4, lr}
 8003aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ace:	4291      	cmp	r1, r2
 8003ad0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ad4:	d1f9      	bne.n	8003aca <memcpy+0xe>
 8003ad6:	bd10      	pop	{r4, pc}

08003ad8 <_realloc_r>:
 8003ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003adc:	4680      	mov	r8, r0
 8003ade:	4614      	mov	r4, r2
 8003ae0:	460e      	mov	r6, r1
 8003ae2:	b921      	cbnz	r1, 8003aee <_realloc_r+0x16>
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aea:	f7ff bc37 	b.w	800335c <_malloc_r>
 8003aee:	b92a      	cbnz	r2, 8003afc <_realloc_r+0x24>
 8003af0:	f7ff fbcc 	bl	800328c <_free_r>
 8003af4:	4625      	mov	r5, r4
 8003af6:	4628      	mov	r0, r5
 8003af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003afc:	f000 f81b 	bl	8003b36 <_malloc_usable_size_r>
 8003b00:	4284      	cmp	r4, r0
 8003b02:	4607      	mov	r7, r0
 8003b04:	d802      	bhi.n	8003b0c <_realloc_r+0x34>
 8003b06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003b0a:	d812      	bhi.n	8003b32 <_realloc_r+0x5a>
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	4640      	mov	r0, r8
 8003b10:	f7ff fc24 	bl	800335c <_malloc_r>
 8003b14:	4605      	mov	r5, r0
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d0ed      	beq.n	8003af6 <_realloc_r+0x1e>
 8003b1a:	42bc      	cmp	r4, r7
 8003b1c:	4622      	mov	r2, r4
 8003b1e:	4631      	mov	r1, r6
 8003b20:	bf28      	it	cs
 8003b22:	463a      	movcs	r2, r7
 8003b24:	f7ff ffca 	bl	8003abc <memcpy>
 8003b28:	4631      	mov	r1, r6
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	f7ff fbae 	bl	800328c <_free_r>
 8003b30:	e7e1      	b.n	8003af6 <_realloc_r+0x1e>
 8003b32:	4635      	mov	r5, r6
 8003b34:	e7df      	b.n	8003af6 <_realloc_r+0x1e>

08003b36 <_malloc_usable_size_r>:
 8003b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b3a:	1f18      	subs	r0, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bfbc      	itt	lt
 8003b40:	580b      	ldrlt	r3, [r1, r0]
 8003b42:	18c0      	addlt	r0, r0, r3
 8003b44:	4770      	bx	lr
	...

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
